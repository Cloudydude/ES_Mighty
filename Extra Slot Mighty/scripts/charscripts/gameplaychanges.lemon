global u8 MightyDDZ
global bool StartInKnuxPath
global bool MightyAIZ2
global bool MightyICZ2
global bool MightyAIZ2_Actselect
global bool MightyICZ2_Actselect
//GAMEPLAY CHANGES

function void ExtraChar.Menu.actselect.updateControl()
{
	base.ExtraChar.Menu.actselect.updateControl()
	if (global.xtrachar == 1) // Here so that Mighty can start out in Knuckles' paths in act 2 of AIZ or ICZ via the act select
		Mighty.KnuxStage = (((global.zone_act == 0x0001 && MightyAIZ2) || (global.zone_act == 0x0501 && MightyICZ2))  && global.act.apparent == 1) ? global.zone_act : 0
}

function void Init()
{
	if (!competition_mode.active && (XtraChar != 1 || char.character != CHARACTER_SONIC))
		StartInKnuxPath = (MightyAIZ2 || MightyICZ2) ? true : false

    base.Init()
}

function void Standalone.onLevelStart()
{
	if ((global.zone_act == 0x0001 && !MightyAIZ2) || (global.zone_act == 0x0501 && !MightyICZ2))
		StartInKnuxPath = false
	if (!competition_mode.active && (XtraChar != 1 || char.character != CHARACTER_SONIC) || (competition_mode.active && competition.xtrachar != 0x01))
	{
		mainchar.groundhit.velocity.x = 0
		mainchar.groundhit.velocity.y = 0
	}
	base.Standalone.onLevelStart()
}

// Victory after defeating a boss
//# address-hook(0x085bda) end(0x085bf6)
function void fn085bda()
{
	if (global.zone == 0x00 || global.zone == 0x05)
		StartInKnuxPath = false
	base.fn085bda()
}

global bool FallingFix
//# address-hook(0x0384b2) end(0x03852e)
function void RunOnWaterHandler.Update()
{
	if (!Mighty_Uncurled_Fall)
		FallingFix = true
	base.RunOnWaterHandler.Update()
}

//# address-hook(0x064964) end(0x06497e)
function void fn064964()
{
	base.fn064964()
	if (!Mighty_Uncurled_Fall)
		FallingFix = true
}

//v1.11 track knux path
//v1.12 improved restart tracking
//# address-hook(0x02d6a6) end(0x02d768)
function void TitleCard.Init()
{
	//when the titlecard is called, I CAN CHECK FOR THE CAMERA Y AND STORE THE PATH INFO!
	if (XtraChar == 1)
	{
		if ( (global.zone_act == 0x0001 || global.zone_act == 0x0501)  && global.act.apparent == 1)
		{ //AIZ2 or ICZ2
			//more precise check to handle restart act, which overwrites with the old x and y player coordinates
			u16 xlimit = (global.zone_act == 0x0001) ? 0x1300 : 0x0780// maximum x valid to check where to start

			if (StartInKnuxPath)
				camera.position.y.u16 = 0x0445

			if (camera.position.x.u16 < xlimit)
			{ //check the coord first, so we can move to the other start point in debug mode use restart act to restart in that path!
				StartInKnuxPath = false
				Mighty.KnuxStage = (camera.position.y.u16 > 0x0440) ? global.zone_act : 0
			}
			//else --- do nothing
		}
		else
		{
			Mighty.KnuxStage = 0
		}
	}
	
	base.TitleCard.Init()
	return
}

global bool BubbleBounce
//reset mighty's variables (and animations)
//v1.11 simplified initialize function
//# address-hook(0x006a76) end(0x006bd6)
function void InitializeGameCharacters()
{
	if (XtraChar == 1)
	{
		FallingFix = false
		MightyWasDropin = false
		Do_not_flash = false
		MightyFrameCounter = 0
		u8[A0 + 0x0d] &= ~0x40
		u8[A0 + 0x0d] &= ~0x02
		MightyBounced = false
		MightyWallCollision = 0
		MightyXCollision = 0
		MightyYCollision = 0
		u8[A0 + 0x2a] &= ~0x80
		Do_not_flash = false
		BubbleBounce = 0
		Held_Bounce_Vel = 0
	}
	
	base.InitializeGameCharacters()
}

function void ExtraChar.CompetitionMode.Character.setupPhysics(u8 xtrachar, u16 speedcap, u16 acceleration, u16 deceleration)
{
	// Mighty's physics
	if (xtrachar == 0x01)
	{
		speedcap = 0x0600
		acceleration = 0x0010
		deceleration = 0x0200
	}
	
	base.ExtraChar.CompetitionMode.Character.setupPhysics(xtrachar, speedcap, acceleration, deceleration)
}

// Fixed underwater muffle sound
//# address-hook(0x018466) end(0x018680)
function void fn018466()
{
    if (XtraChar == 1 && Mighty.KnuxStage == 1 && global.zone_act.apparent == 0x0001)
    {
        base.fn018466()
        Game.setUnderwaterAudioEffect(0)
    }
    else
    {
        base.fn018466()
        return
    }
}

//start location and animation has to be fixed for HCZ1 and ICZ1
//PART 2
//# address-hook(0x0067ee) end(0x0069b6)
function void fn0067ee()
{
	if (XtraChar != 1) //check only for Mighty 
	{
		base.fn0067ee()
		return
	}

	//Is Extra Life UNDER mighty in load order?
	//Extra life has to take over in CNZ and MHZ
	u64 extraLife = stringformat("goal_extraLife_UW", 0)
	if (Renderer.hasCustomSprite(extraLife) && ((global.zone_act == 0x0300) || (global.zone_act == 0x0700)))
	{
		base.fn0067ee()
		return
	}

	if (Mighty_Level_Transition_Fall != 1)
	{
		u8[0xffffF737] = 1
		u8[0xffffF738] = 1
	}
	else
	{
		if ((global.zone_act == 0x0100) || (global.zone_act == 0x0200) || (global.zone_act == 0x0900 && !isMainCharacter(CHARACTER_KNUCKLES)) || (global.zone_act == 0x1600))
		{
			// Beginning of Hydrocity Zone, Marble Garden Zone, Lava Reef Zone, or Lava Reef Boss Act
			u8[0xffffE656] = 1 // P1
			if (global.characters != CHARS_TAILS_ALONE)
				u8[0xffffE657] = 1 // P2
		}
	}

	u32[0xffffb094] = 0x006c2c
	InitializeGameCharacters()
	RestoreShield()
	if (checkpoint.number != 0 || global.stage_type != 0)
		return
	
	A1 = 0xffffb000
	A2 = 0xffffb04a
	if (global.zone_act == 0x0000)
	{
		// Angel Island Zone
		if (isSonicIntro())
		{
			// Trigger intro
			u32[0xffffb172] = 0x067472
			global.level_started = 0
		}
	#if STANDALONE
		else if (isMainCharacter(CHARACTER_KNUCKLES) && Game.getSetting(SETTING_AIZ_INTRO_KNUCKLES) != 0 && !Game.isTimeAttack())
		{
			u32[0xffffb172] = 0x063446
		}
	#endif
	}
	else if (global.zone_act == 0x0100)
	{
		// Hydrocity Zone
		ShouldUncurl = true
		objA1.state = char.state.FALLING_PANIC
		
		//Mighty should roll in if coming from knux path (because they jumped)
		if (global.characters != CHARS_KNUCKLES_ALONE && level.start_location == 2)
		{
			objA1.state = char.state.ROLLING
		}
		
		if (global.characters == CHARS_KNUCKLES_ALONE)
		{
			u16[A1 + 0x20] = 0x2121
			u8[A1 + 0x23] = 1
			objA1.animation.timer = 0	// This is A0 instead of A1 in original, thanks to Clownacy (https://forums.sonicretro.org/index.php?showtopic=30778&view=findpost&p=893997)
		}
		objA1.flags2a |= char.flag.IN_AIR
		if (global.characters == CHARS_TAILS_ALONE)
		{
			u8[A1 + 0x40] = 0x01
		}
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.FALLING_PANIC
			u8[A2 + 0x2a] |= char.flag.IN_AIR
			u8[A2 + 0x40] = 0x01
		}
	}
	else if (global.zone_act == 0x0200)
	{
		// Marble Garden Zone
		ShouldUncurl = true
		objA1.state = char.state.FALLING_PANIC
		objA1.flags2a |= char.flag.IN_AIR
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.FALLING_PANIC
			u8[A2 + 0x2a] |= char.flag.IN_AIR
		}
	}
	else if (global.zone_act == 0x0300)
	{
		// Carnival Night Zone
		// This one is completely different if we're in DA GARDEN
		// It's the only thing I need to patch for Mighty so I'll do it here
		//find a unique texture used in DA Garden. If found then it's locked on!
		//There should be no chance another mod will come out with a picture called obj_dark_sand_pit_overlay_shallow184!
		u64 key = stringformat("obj_dark_sand_pit_overlay_shallow184", 0)
		if (Renderer.hasCustomSprite(key))
		{ //DA GARDEN	
			if (level.start_location == 1 && !isMainCharacter(CHARACTER_TAILS))
			{
				u32[0xffffb04a] = 0x01365c		// load Tails into the player 2 position of the object status table
				u16[0xffffb05a] = u16[0xffffb010]		// copy x position
				u16[0xffffb05e] = u16[0xffffb014]		// copy y position
				tails.ai_routine = 0x00	// originally 0
			}
			else if (level.start_location == 1 && isMainCharacter(CHARACTER_TAILS))
			{
				tails.ai_routine = 0x20
			}
			else // if (isMainCharacter(CHARACTER_KNUCKLES))
			{
				u32[0xffffb172] = 0x044a0c // load Obj_LevelIntro_PlayerRun
			}
		}
		else
		{ //NORMAL SONIC 3 AIR
			bool spawnAITails = (global.characters == CHARS_SONIC_ALONE)	// Excluding Sonic & Tails
		#if STANDALONE
			if (level.start_location == 1 && isMainCharacter(CHARACTER_KNUCKLES))
			{
				spawnAITails = true
			}
		#endif
			if (level.start_location == 2)
			{
				u32[0xffffb172] = 0x044a0c
			}
			else if (spawnAITails)
			{
				u32[0xffffb04a] = 0x01365c
				u16[0xffffb05a] = u16[0xffffb010]
				u16[0xffffb05e] = u16[0xffffb014]
				tails.ai_routine = 0
			}
			// else if (isMainCharacter(CHARACTER_TAILS))
			// {
			// 	tails.ai_routine = 0x20
			// }
		}
	}
	else if (global.zone_act == 0x0400)
    {
		// Flying Battery Zone
		base.fn0067ee()
		return
	}
	else if (global.zone_act == 0x0500)
	{
		// IceCap Zone
		// Mighty Starts like Tails
		u32[0xffffb172] = 0x039b66	
	}
	else if (global.zone_act == 0x0600)
	{
		// Launch Base Zone
		u32[0xffffb172] = 0x039a40
	}
	else if (global.zone_act == 0x0700)
	{
		// Mushroom Hill Zone
		if (global.lock_on_state == 0 && level.start_location == 2)
		{
			ShouldUncurl = true
			objA1.state = char.state.FALLING_PANIC
			objA1.flags2a |= char.flag.IN_AIR
			objA1.position.x.u16 = 0x1c2
			objA1.position.y.u16 = 0x485
		}
		else
		{
			base.fn0067ee()
			return
		}
	}
	else if (global.zone_act == 0x0800)
	{
		// Sandopolis Zone
		u32[0xffffb172] = 0x041fee
		objA1.state = char.state.ROLLING
		objA1.flags2a |= char.flag.IN_AIR
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.ROLLING
			u8[A2 + 0x2a] |= char.flag.IN_AIR
		}
	}
	else if (global.zone_act == 0x0900)
	{
		// Lava Reef Zone
		if (global.characters != CHARS_KNUCKLES_ALONE)
		{
			ShouldUncurl = true
			objA1.state = char.state.FALLING_PANIC
			objA1.flags2a |= char.flag.IN_AIR
			if (u32[A2] != 0)
			{
				u8[A2 + 0x20] = char.state.FALLING_PANIC
				u8[A2 + 0x2a] |= char.flag.IN_AIR
			}
		}
		else
		{
			u32[0xffffb172] = 0x044a0c
		}
	}
	else if (global.zone_act == 0x0b00)
	{
		// Death Egg Zone
		u32[0xffffb172] = 0x044a0c
	}
	else if (global.zone_act == 0x1600)
	{
		// Lava Reef boss act
		ShouldUncurl = true
		objA1.state = char.state.FALLING_PANIC
		objA1.flags2a |= char.flag.IN_AIR
		if (u32[A2] != 0)
		{
			u8[A2 + 0x20] = char.state.FALLING_PANIC
			u8[A2 + 0x2a] |= char.flag.IN_AIR
		}
	}
	else if (global.zone_act == 0x1601)
	{
		// Hidden Palace Zone
		u32[0xffffb172] = 0x044a0c
	}
}

//# address-hook(0x074768) end(0x0747d0)
function void fn074768()
{
	if (XtraChar == 1)
		Kosinski.addToDMAQueue(0, 0) // Turns Eggrobo into Eggman in LBZ act bomb cutscene
	base.fn074768()
}


//PART1
//# address-hook(0x01be46) end(0x01bfae)
function void SetupCharacterAtStartPosition()
{
	if (XtraChar != 1)
	{
		base.SetupCharacterAtStartPosition()
		return
	}
	//only mighty

	if (checkpoint.number != 0)
	{
		SetupCharacterAtLastCheckpoint()
		D1.u16 = u16[0xffffb010]
		D0.u16 = u16[0xffffb014]
		
		if (global.zone_act == Mighty.KnuxStage && Mighty.KnuxStage == 0x0001) //AIZ 2 in knux path
		{
			//set water levels
			if (global.zone_act == 0x0001)//AIZ2 only
			{
				//keep water away and resize the area				
				water.height.target = 0x1000
				water.height.changerate = 40				
			}
		}
	}
	else
	{
		A1 = isMainCharacter(CHARACTER_KNUCKLES) ? 0x1e3cd8 : 0x1e3c18
		A1 += global.zone * 8 + global.act * 4
		D1 = u16[A1]
		D0 = u16[A1+2]
		u16[0xffffb010] = D1.u16
		u16[0xffffb014] = D0.u16

		if (global.zone_act == 0x0000)
		{
			if (isSonicIntro())
			{
				D1.u16 = 0
				D0.u16 = 0x420
				u16[0xffffb010] = 0x0040
				u16[0xffffb014] = 0x0420
				move_area.left = 0
				u16[0xffffee0c] = 0
				u16[0xffffee1c] = 0
			}
		#if STANDALONE
			else if (isMainCharacter(CHARACTER_KNUCKLES) && (Game.getSetting(SETTING_AIZ_INTRO_KNUCKLES) != 0 || Game.isTimeAttack()))
			{
				// First set the desired camera position, then character position gets calculated after the if-else-blocks
				//  -> Camera positions here should be the same as in "fn0634ca"
				if (Game.getSetting(SETTING_LEVELLAYOUTS) == 2)
				{
					u16[0xffffb010] = 0x1830
					u16[0xffffb014] = 0x0119
					D1.u16 = 0x1768
					D0.u16 = 0x0090
					move_area.bottom.current = D0.u16
					move_area.bottom.target = D0.u16
				}
				else
				{
					D1.u16 = 0x1390
					D0.u16 = 0x0380
				}
				D1.u16 += getScreenWidth() / 2
				D0.u16 += 96
			}
		#endif
		}
		else if (global.zone_act == Mighty.KnuxStage) //AIZ 2 or ICZ 2--Are we in knux's route?
		{
			//set knuckles start position values
			A1 = 0x1e3cd8
			A1 += global.zone * 8 + global.act * 4
			D1 = u16[A1]
			D0 = u16[A1+2]
			u16[0xffffb010] = D1.u16
			u16[0xffffb014] = D0.u16
			if (global.zone_act == 0x0001)//AIZ2 only
			{
				//move water away and resize the area	
				move_area.left = 0x1040			
				camera.update_routine = 0x16
				water.height.target = 0x1000
				water.height.changerate = 40
			}
		}
		else if (global.zone_act == 0x0300)
		{
			u64 key = stringformat("obj_dark_sand_pit_overlay_shallow184", 0)
			if (!Renderer.hasCustomSprite(key) && level.start_location == 2)
			{
				// u16[0xffffb010] = 0x3780 // x-position
				// u16[0xffffb014] = 0x01e0 // y-position
				// D1.u16 = 0x0018 // x-position camera
				// D0.u16 = 0x0690 // y-position camera

				u16[0xffffb010] = 0x0018
				u16[0xffffb014] = 0x06Cc
				D1.u16 = 0
				D0.u16 = 0x06b0
			}
			else
			{
				base.SetupCharacterAtStartPosition()
				return
			}
		}
		else if (global.zone_act == 0x0500)
		{
			//Mighty has to starts like Tails			
			u16[0xffffb010] = 0x3780
			u16[0xffffb014] = 0x01e0
			camera.position.x.u16 = 0x36f0
			camera.position.y.u16 = 0x0200
			move_area.left  = 0x35a0
			u16[0xffffee0c] = 0x35a0
			u16[0xffffee1c] = 0x35a0
			level.vertical_wrap = 0x0200
			u16[0xffffee10] = 0x0200
			u16[0xffffee20] = 0x0200
			u16[0xffffee60] = 0x36f0
			u16[0xffffee64] = 0x0200
			return		
		}
	#if STANDALONE
		else if (global.zone_act == 0x0601)
		{
			if (isMainCharacter(CHARACTER_KNUCKLES) && getNumPlayers() == 2)
			{
				// Move Knuckles a bit to the right in LBZ 2 to make space for Tails
				u16[0xffffb010] += 0x10
				D1.u16 += 0x10
			}
		}
	#endif
		else if (global.zone_act == 0x0700)
		{
			if (!isMainCharacter(CHARACTER_KNUCKLES) && global.lock_on_state == 0)
			{
				move_area.left  = 0x00c0
				u16[0xffffee0c] = 0x00c0
				u16[0xffffee1c] = 0x00c0
				D1.u16 = 0x0160
			}
		}
		else if (global.zone_act == 0x0900)
		{
			if (isMainCharacter(CHARACTER_KNUCKLES))
			{
				D1.u16 += 0xb0
			}
		}
		else if (global.zone_act == 0x1601)//HIDDEN PALACE
		{	
			//Always start from below (sonic), unless the upper path was taken while playing
			if (level.start_location == 2)
			{
				A1 = 0x1e3cd8
			}
			else
			{
				A1 = 0x1e3c18
			}
			A1 += global.zone * 8 + global.act * 4
			D1 = u16[A1]
			D0 = u16[A1+2]
			u16[0xffffb010] = D1.u16
			u16[0xffffb014] = D0.u16
			D1.u16 += 0xb0 + getScreenExtend()
		}		
		else if (global.zone_act == 0x0b00) //DEATH EGG
		{
			D1.u16 += 0xb0 + getScreenExtend()
		}
	#if STANDALONE
		else if (global.zone == 0x13)
		{
			// Gumball Machine:
			// Do not allow for jumping in first frame
			u8[0xffffb000 + 0x20] = char.state.STANDING
			u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
			u8[0xffffb04a + 0x20] = char.state.STANDING
			u8[0xffffb04a + 0x2a] |= char.flag.IN_AIR
		}
		else if (global.zone == 0x15)
		{
			// Slot Machine
			D1.u16 -= getScreenExtend()
		}
	#endif
	}

	D1.s16 = max(D1.s16 - getScreenWidth() / 2, 0)
	if (competition_mode.active == 0)
	{
	#if STANDALONE
		// Avoid exact tile edges
		//  -> This was particularly added in to avoid glitches in first pixel row after exiting first Giant Ring in AIZ 2
		//     (There's probably a better solution, that generally solves this type of glitches when going left in AIZ 2)
		if ((D1.u16 & 0x0f) == 0)
			++D1.u16
	#endif
		D1.u16 = min(D1.u16, move_area.right)
	}

	camera.position.x.u16 = D1.u16
	u16[0xffffee60] = D1.u16

	D0.s16 = clamp(D0.s16 - 96, 0, s16(move_area.bottom.current))
	camera.position.y.u16 = D0.u16
	u16[0xffffee64] = D0.u16
}

//AIZ2 -- WATER RISING FIX ON KNUCKLES PATH IF NOT KNUCKLES (position dependant instead of character dependant)

//v1.12 -- restart on checkpoints like knuckles
//# address-hook(0x007892) end(0x007a48)
function void Level.InitializeWater()
{
	bool levelHasWater = false
	if (global.zone_act == 0x0000 || global.zone == 0x01 || global.zone_act == 0x0501 || global.zone_act == 0x0601)
	{
		levelHasWater = true
	}
	else if (global.zone_act == 0x0001)		// Angel Island 2
	{
		levelHasWater = (global.zone_act.apparent != 0x01)// || !isMainCharacter(CHARACTER_KNUCKLES)) (never water, check for everyone)
	#if STANDALONE
		if (!levelHasWater && (!isMainCharacter(CHARACTER_KNUCKLES) || checkpoint.number != 0))	// Checkpoint 0 is Knuckles' start
		{
			// Knuckles presumably on Sonic's path?
			u16 px = (global.stage_type == 0) ? checkpoint.x : u16[0xfffffe4c]
			u16 py = (global.stage_type == 0) ? (checkpoint.y & 0x7fff) : u16[0xfffffe4e]
			if (px < 0x1400)
			{
				// Start area of AIZ 2
				levelHasWater = (py < 0x0400)
			}
			else
			{
				levelHasWater = (py < 0x0620)
			}
		}
	#endif
	}
	else if (global.zone_act == 0x0301)		// Carnival Night 2
	{
		levelHasWater = !isMainCharacter(CHARACTER_KNUCKLES)
	}

	if (!levelHasWater)
	{
		level.water_present = 0
		water.height.current = 0x1000
		water.height.next = 0x1000
		water.height.target = 0x1000
	}
	else
	{
		level.water_present = 1
		competition_mode.active = 0

		u16[0xfffffff6] = 0x4ef9	// Machine code for "jump"
		if (global.zone == 0x01)
		{
			irq_table.lineupdate = 0x001024
		}
		else if (u16[0xffffffd6] >= 0x1000)
		{
			irq_table.lineupdate = 0x000f00
		}
		else
		{
			irq_table.lineupdate = 0x000dd8
		}

		water.palette.source = 0x0074e0

		u16 offset = global.zone * 4 + global.act * 2
		u16 waterHeight = u16[0x006d2c + offset]
		water.height.current = waterHeight
		water.height.next = waterHeight
		water.height.target = waterHeight

		water.transition_counter = 0
		water.fullscreen = 0
		water.height.changerate = 1

		Level.InitializeWater.Part2()
	}
}

// Fixed underwater muffle sound
//# address-hook(0x018466) end(0x018680)
function void fn018466()
{
	if (XtraChar == 1 && Mighty.KnuxStage == 1 && global.zone_act.apparent == 0x0001)
	{
		base.fn018466()
		Game.setUnderwaterAudioEffect(0)
	}
	else
	{
		base.fn018466()
		return
	}
}

//# address-hook(0x006dde) end(0x006e6c)
function void UpdateWaterSurfaceLevel.AIZ2()
{
	//this has to be path dependant, not character dependant!
	if (camera.position.y.u16 < 0x0f80) //(isMainCharacter(CHARACTER_KNUCKLES))
	{
		if (move_area.bottom.target == 0x0820 || camera.position.x.u16 >= 0x3b60)
			return
	}

	// Somewhere in here:
	//  - Lower water level
	//  - Cause screen shake to start

	if (camera.position.x.u16 < 0x2440)
	{
		if (water.height.target == 0x0618)
		{
			water.height.target = 0x0528
			water.height.changerate = 2
		}
	}
	else
	{
		if (level.trigger00 == 0)
		{
			if (camera.position.x.u16 < 0x2850)
				return

			level.trigger00 = 1
		}

		if (water.height.target != 0x0618)
		{
			if (camera.position.x.u16 < 0x2900)
			{
				camera.screenshake.state = 0xffff
				if (allocDynamicObjectStd())
				{
					objA1.update_address = 0x006e6e
					u8[A1 + 0x24] = 0xb4
				}
			}

			A3 = 0xffff8024
			D1 = 4
			while (D1 > 0)
			{
				A1 = 0xffff0000 + u16[A3]
				u8[A1 + 0x4e] = 0
				A3 += 4
				--D1
			}
			water.height.target = 0x0618
		}
	}
}

function void AIZ2.LevelInitSpecialty()
{

	if (global.zone_act.apparent == 0x0001)
	{
		move_area.left = 0x1040
	}

	base.AIZ2.LevelInitSpecialty()
	return
}

//-------------------------------------------------------//
// Cutscene to Hydrocity				                 //
//-------------------------------------------------------//
//TRIGGER PROPERLY DEPENDING ON THE PATH:
//UPPER PATH -> Cutscene knuckles drops you down
//LOWER PATH -> "Suicidal" jump

//# address-hook(0x069526) end(0x069586)
function void fn069526()
{
	// Part of cutscene: Running onto the bridge over Hydrocity
	//I forgot that this should only affect mighty
	if (global.zone_act != 0x0001 || XtraChar != 1)
    {
        base.fn069526()
        return
    }

	tails.catch_timeout = 5
	A1 = 0xffffb000
	D0.u16 = u16[0xfffffa84] + 0x01f8
	if (D0.u16 > objA1.position.x.u16)
	{
		// Move right
		control.player1 = 0x0808
		return
	}

	StopObjectA1()
	
	// UPPER PATH -- CUTSCENE
	if (camera.position.y.u16 < 0x200)//(!isMainCharacter(CHARACTER_KNUCKLES))
	{
		objA0.update_address = 0x069588
		if (allocDynamicObjectStd())
		{
			objA1.update_address = 0x061d4c
			objA1.subtype2c = 0x04
		}
		EndLocation = 1
		addPatternLoadingCue(0x083d6c)
	}
	else
	{
		EndLocation = 2
		objA0.update_address = 0x0695ce
		control.player1 = 0x2020	
	}
}

//Have Mighty keep the jump animation if he leaps down
//# address-hook(0x0695ce) end(0x069610)
function void fn0695ce()
{
	if (XtraChar != 1)
	{
		base.fn0695ce()
		return
	}

	control.player1 = 0x2000

	A1 = 0xffffb000
	u8[A1 + 0x0a] |= 0x80
	if (objA1.velocity.y < 0)
		return
	
	objA0.update_address = 0x069616
	// u8[A1 + 0x22] = 0xcb
	u8[A1 + 0x2e] = 0x83
	UpdatePlayer1SpritePatterns()
	
	D0.u16 = 0x1000
	screenmover_target.bottom = D0.u16
	move_area.bottom.target = D0.u16

	// "spawnSimpleChildObjects(0x084b12)" replaced by:
	spawnSimpleChildObjects(0x084ad2, 1)		// Screen mover for the lower border
}

// Unlock Mighty_Partner movement if with Mighty
//# address-hook(0x06c8f4) end(0x06c930)
function void fn06c8f4()
{
	base.fn06c8f4()
	if (XtraChar == 1 || useKnucklesAndTails)
	{
		if (level.wait_for_results)
			return
		stopCharacterWinPose(0xffffb04a)
	}
}

// TAILS SPAWN POINTS
//I changed the starting point, tails needs a reset if he is with mighty
//TAILS NEEDS A RESET IF PLAYING AS MIGHTY AND TAILS in ICZ
//# address-hook(0x013a10) end(0x013b24)
function void Character.TailsAI.Init()
{

	//make it only for mighty and only in ICZ
	if (XtraChar != 1)
	{
		base.Character.TailsAI.Init()
		return
	}

	if (u8[0xfffff746] == 0)	// This is some checkpoint number backup for Tails
	{
		u64 key = stringformat("obj_dark_sand_pit_overlay_shallow184", 0) // D.A. Garden check
		if (global.zone_act == 0x0300 && !Renderer.hasCustomSprite(key))		// CNZ 1
		{
		#if STANDALONE
			if (level.start_location != 2)
		#endif
			{
				char.position.x.u16 = 0x18
				char.position.y.u16 = 0x600
				char.flags = char.flag.IN_AIR
				tails.control_counter = 0
				tails.respawn_counter = 0
				tails.ai_routine = 0x0c
				return
			}
		}
		else if (global.zone_act == 0x0500)	// ICZ 1
		{
		#if STANDALONE
			if (global.zone_act == 0x0500)//(isMainCharacter(CHARACTER_KNUCKLES))
			{
				tails.respawn_counter = 0
				tails.ai_routine = 0x02
				char.control_flags = 0x81
				char.flags = char.flag.IN_AIR
				char.position.x.u16 = 0
				char.position.y.u16 = 0
				tails.flight_countdown = 0xf0
				return
			}
		#endif

			// Disable Tails
			// TODO: At least in SSZ, we should spawn Tails as well right from the start (he will reappear after a death anyway)
			RespawnTails()
			tails.ai_routine = 0x0a
			char.control_flags = 0x83
			return
		}
		else if (global.zone_act == 0x0700 && global.lock_on_state == 0 && level.start_location == 2)
		{
			// MHZ 1
			char.flags = char.flag.IN_AIR
			char.state = char.state.FALLING_PANIC
			tails.control_counter = 0
			tails.respawn_counter = 0
			tails.ai_routine = 0x06

			char.position.x.u16 = 0x196
			char.position.y.u16 = 0x485
			return
		}
		else
		{
			base.Character.TailsAI.Init()
			return
		}
	}

	char.state = char.state.RUNNING
	char.velocity.x = 0
	char.velocity.y = 0
	char.groundspeed = 0
	char.flags = 0
	char.control_flags = 0
	tails.respawn_counter = 0
	tails.ai_routine = 0x06
}


//ROCK BREAKING
//Mighty breaks ROCKS (not walls though) this includes rocks in AIZ1 and LRZ
//ALL ROCKS (not walls!)
//# address-hook(0x01fd08) end(0x01ff1a)
function void fn01fd08()
{
	// if character isn't Mighty or the wall jump is disabled, then return base
	if (XtraChar != 1 || (Mighty_Custom_Mappings == 0 && Wall_Jump_Button == 0x00))
	{
		base.fn01fd08()
		return
	}
	
	u16[A0 + 0x30] = u16[0xffffb018]
	u16[A0 + 0x36] = u16[0xffffb062]

	D1 = objA0.box_size.x + 11
	D2 = objA0.box_size.y
	D3.u16 = D2.u16 + 1
	D4.u16 = objA0.position.x.u16
	fn01dc56()

	D6 = (D6 << 16) + (D6 >> 16)
	if (D6.u16 & 0x03)
	{
		bool canBreakWall = false

		A1 = 0xffffb000
		D1.u16 = u16[A0 + 0x30]
		if (D6.u16 & 0x01)
		{
			// Mighty can break all Rocks
			canBreakWall = true

			if (canBreakWall)
			{
				objA0.flags2a &= ~0x20
				Rocks.BreakWall()

				if (objA0.flags2a & 0x40)
				{
					// Check for second character
					A1 = 0xffffb04a
					if (u8[A1 + 0x38] == CHARACTER_KNUCKLES || objA1.state == char.state.ROLLING)
					{
						objA1.velocity.x = u16[A0 + 0x36]
						u16[A1 + 0x1c] = objA1.velocity.x
						objA0.flags2a &= ~0x40
						objA1.flags2a &= ~char.flag.PUSHING
					}
				}
			}
		}

		if (!canBreakWall)
		{
			// Give second character a try
			A1 = 0xffffb04a
			D1.u16 = u16[A0 + 0x36]

			if (objA0.flags2a & 0x40)
			{
				if (u8[A1 + 0x38] == CHARACTER_SONIC)
				{
					// Knuckles can break all walls
					canBreakWall = true
				}
				else
				{
					if ((objA0.subtype2c & 0x80) == 0)	// Special Knuckles-only wall?
					{
						// Normal Sonic and Tails need to quickly roll into a wall to break it (this includes the fire shield attack)
						canBreakWall = (objA1.state == char.state.ROLLING && abs(D1.s16) >= 0x480)
					}
				}
			}

			if (canBreakWall)
			{
				objA0.flags2a &= ~0x40
				Rocks.BreakWall()
				return
			}
		}
	}

	if (competition_mode.active == 0)
	{
		if (checkForUnloadObjectAtPosition(objA0.countdown_value))
			return
	}
	DrawObject()
}

//--------------------------
//ICE CAP UNIQUE WALL
//--------------------------
//Mighty should be able to break these as well
//# address-hook(0x08a280) end(0x08a2dc)
function void fn08a280()
{
	if (XtraChar != 1 || (Mighty_Custom_Mappings == 0 && Wall_Jump_Button == 0x00))
	{
		base.fn08a280()
		return
	}


#if STANDALONE
	// Ground speed of player 1 before the collision
	s16 speed = s16[0xffffb000 + 0x1c]
#endif

	D1 = 0x2b
	D2 = 0x40
	D3 = 0x70
	D4.u16 = objA0.position.x.u16
	fn01dc56()

	// Mighty can break this kind of wall
	if (true)
	{
		D6 = (D6 << 16) + (D6 >> 16)
		D6.u16 &= 0x01
		if (D6.u16 != 0)
		{
			fn08a2e2()

		#if STANDALONE
			// Restore ground speed, which in most cases got reset
			// TODO: Check how this is done in other cases of breakable rocks
			s16[0xffffb000 + 0x1c] = speed
			u8[0xffffb000 + 0x2a] &= ~char.flag.PUSHING
		#endif
			return
		}
	}

	A1 = 0xffff0000 + u16[0xfffffaa4]
	if (u32[A1] == 0x089f38)
	{
		D0.u16 = objA1.position.x.u16
		D1.u16 = objA1.position.y.u16 & level.height.bitmask
		D2.u16 = objA0.position.x.u16
		D3.u16 = objA0.position.y.u16

		A2 = 0x08a2fc
		D2.u16 += u16[(A2+=2)-2]
		if (D0.u16 >= D2.u16)
		{
			D2.u16 += u16[(A2+=2)-2]
			if (D0.u16 < D2.u16)
			{
				D3.u16 += u16[(A2+=2)-2]
				if (D1.u16 >= D3.u16)
				{
					D3.u16 += u16[(A2+=2)-2]
					if (D1.u16 < D3.u16)
					{
						fn08a2e2()
						return
					}
				}
			}
		}
	}
	DrawOrUnloadObject()
}

global bool StoryBlocks

//# address-hook(0x021818) end(0x021936)
function void fn021818()
{
	if (XtraChar != 1)
	{
		base.fn021818()
		return
	}

	u16[A0 + 0x30] = u16[0xffffb000 + 0x18]
	objA0.value32 = u16[0xffffb04a + 0x18]
	D1 = objA0.box_size.x + 11
	D2 = objA0.box_size.y
	D3.u16 = D2.u16 + 1
	D4.u16 = objA0.position.x.u16
	fn01dc56()
	if (s8[A0 + 0x2c] < 0)
	{
		if (level.trigger00 == 0)
		{
			DrawOrUnloadObject()
		}
		else
		{
			UnloadObject()
		}
		return
	}

	D6 = (D6 << 16) + (D6 >> 16)
	D6.u16 &= 0x03
	if (D6.u16 == 0)
	{
		DrawOrUnloadObject()
		return
	}

	A1 = 0xffffb000
	D1.u16 = u16[A0 + 0x30]

	// This little bit is for anyone who wants to enter some of Knuckles' paths in MGZ, LBZ, and SOZ
	bool CanMighyBreak = (Mighty_Custom_Mappings == 0 && Wall_Jump_Button == 0x00) ? false : true
	if ((D6.u16 & 0x01) && (u8[A1 + 0x38] == CHARACTER_SONIC))
	{
		objA0.flags2a &= ~0x20
		// controls whether or Mighty should break these blocks
		if (global.zone == 0x08 && CanMighyBreak || ((global.zone_act == 0x0201 || global.zone_act == 0x0601) && StoryBlocks && CanMighyBreak))
			fn0218ce()

		A1 = 0xffffb04a
		if ((objA0.flags2a & 0x20) == 0)
		{
			DrawOrUnloadObject()
			return
		}

		objA1.velocity.x = objA0.value32
		u16[A1 + 0x1c] = objA1.velocity.x
		objA0.flags2a &= ~0x20
		objA1.flags2a &= ~char.flag.PUSHING
		DrawOrUnloadObject()
	}
	else
	{
		A1 = 0xffffb04a
		D1.u16 = objA0.value32
		if ((objA0.flags2a & 0x20) == 0 || u8[A1 + 0x38] != CHARACTER_KNUCKLES)
		{
			DrawOrUnloadObject()
			return
		}

		objA0.flags2a &= ~0x20
		fn0218ce()
	}
}

//# address-hook(0x024280) end(0x0242b4)
function void DamageCharacter()
{
	if ((u8[A1 + 0x2b] & char.bonus.INVINCIBLE) == 0)
	{
		if (u8[A1 + 0x34] == 0 && u8[A1 + 0x05] < 4)
		{
			D3 = u32[A1 + 0x14]
			D0 = s32(objA1.velocity.y) << 8
			D3 -= D0
			u32[A1 + 0x14] = D3
			A2 = A0
			A0 = A1

			// Hurt character
			Character.GettingHurt()
			A0 = A2
		}
	}
}

//Hidden palace skip (V1.7)
//Mighty CAN skip knuckles in Lava Reef,
//as such, he has to transition in hidden palace properly if he takes the high route
// Object that allows Knuckles to just exit the level to the right
//  -> Also used in LRZ Boss act for Sonic / Tails, and possibly elsewhere
// We want it to save for everyone should they reach it
//# address-hook(0x0863ec) end(0x086422)
function void fn0863ec()
{
	if (XtraChar != 1)
	{
		base.fn0863ec()
		return
	}

	A1 = 0xffffb000
	A2 = 0x086426
	fn0858c8()
	if (_equal())
		return

	if (global.zone == 0x09)
	{
		u8[0xffffef56] = 0xff
		SaveGameOnLevelFinished()
	}

	D0 = u16[A0 + 0x2c] >> 1
	D0.u8 = (D0.u8 << 1) + (D0.u8 >> 7)
	TriggerNextZone()
}

//extend the area, no matter the access point, fight knuckles and go to sky sanctuary!
//# address-hook(0x05a12e) end(0x05a152)
function void InitLevelTiles.HPZ()
{
	if (XtraChar != 1)
	{
		base.InitLevelTiles.HPZ()
		return
	}
	//no resizing of areas

	Level.GetCameraPosition()
	Level.InitialTilesFill()
}

//Determine next start location at zone completion
global u8 EndLocation
//# address-hook(0x085e3a) end(0x085e50)
function void TriggerNextZone()
{
	if (XtraChar != 1)
	{
		base.TriggerNextZone()
		return
	}

#if STANDALONE
	Standalone.onLevelFinished()
	D0.u16 = Game.onTriggerNextZone(D0.u16)

	// Decide on the next zone's start location -- either the default or an alternative one
	//  - 0 is the default
	//  - 1 is Sonic's and Tails' path
	//  - 2 is Knuckles's path
	level.start_location = 0

	//handle hcz
	if (D0.u16 == 0x0100)
	{
		// AIZ -> HCZ
		//determines the animation according to how the player ended AIZ
		level.start_location = EndLocation
		EndLocation = 0
	}

	if (D0.u16 == 0x0300)
	{
		// MGZ -> CNZ
		level.start_location = (camera.position.y.u16 < 0x0600) ? 2 : 1
	}
	else if (D0.u16 == 0x0500)
	{
		// CNZ -> ICZ
		level.start_location = (camera.position.y.u16 > 0x0300) ? 2 : 1
	}
	else if (D0.u16 == 0x0700)
	{
		// LBZ -> MHZ
		level.start_location = (camera.position.y.u16 >= 0x0328 && camera.position.y.u16 <= 0x0453) ? 2 : 1
	}
	//HIDDEN PALACE FROM KNUX PATH IN LAVA REEF 2
	else if ((D0.u16 == 0x1601)&&(global.zone_act == 0x0901))
	{
		level.start_location = 2
	}
	
	if (Game.getSetting(SETTING_MAINTAIN_SHIELDS))
	{
		global.shields_backup_1 = u8[0xffffb02b] & 0x71
	}
#endif

	// Trigger the fade out and loading of next zone
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	level.restart = 1
	checkpoint.number = 0
	global.stage_type = 0

#if STANDALONE
	Standalone.onLevelStart()
#endif
}

function bool DEZFinalBoss3.canPlayerEnterDoomsday()
{
	//Can Mighty enter Doomsday Zone?
	if (XtraChar != 1)
		return base.DEZFinalBoss3.canPlayerEnterDoomsday()
	return (MightyDDZ == 0 ? global.chaos_emeralds == 7 : false)
}

function void fn0803d6()
{
	if (XtraChar != 1)
	{
		base.fn0803d6()
		return
	}
	A1 = 0xffff0000 + u16[A0 + 0x44]
	if (u8[A1 + 0x2a] & 0x80)
	{
		u8[0xffffef56] = 0xff
		SaveGameOnLevelFinished()
		Object.TriggerUnloading()

		if (DEZFinalBoss3.canPlayerEnterDoomsday())
		{
			// Yay, Doomsday Zone!
			D0.u16 = 0x0c00
			TriggerNextZone()
		}
		else
		{
			// Outro for Sonic / Tails
			D0.u16 = 0x0d01
			TriggerNextZone()
		}
	}
}

//-------------------------------------------------------//
// Outro pilot                                           //
//-------------------------------------------------------//
global bool Mighty_Pilot
// Zoomed out sonic head
//# address-hook(0x05ecb4) end(0x05ed0c)
function void fn05ecb4()
{
    if (XtraChar != 1)
    {
        base.fn05ecb4()
        return
    }

    setupObjectAttributesFull(0x0600e6)

    A1 = 0xffff0000 + u16[A0 + 0x46]
    u8[A0 + 0x0a] = (u8[A0 + 0x0a] & ~0x80) | (u8[A1 + 0x0a] & 0x80)
    if ((u8[A1 + 0x04] & 0x04) == 0)
    {
        objA0.render_flags &= ~0x04
    }

    objA0.update_address = 0x05ed18
	u16 offset

	if (Mighty_Pilot == 0)
	{
    	offset = 2 * 2 // Sonic pilots the plane
	}
	else
	{
		offset = global.characters // Tails pilots the plane
		offset *= 2
	}

    if (objA0.subtype2c != 0)
    {
        ++offset
    }
    objA0.animation.sprite = u8[0x05ed0e + offset]
}

// Regular sized sonic head
//# address-hook(0x05eb32) end(0x05eb66)
function void fn05eb32()
{
	if (XtraChar != 1)
    {
        base.fn05eb32()
        return
    }
	objA0.update_address = 0x05ebb4

	A1 = 0xffff0000 + u16[A0 + 0x46]
	objA0.sprite_priority = u16[A1 + 0x08]
	objA0.box_size.x = 0x20
	objA0.box_size.y = 0x20
	if (u8[A1 + 0x04] & 0x04)
	{
		objA0.render_flags |= 0x04
	}

	// Targets:
	//  - 0x05eb72	-> global.characters = CHARS_SONIC_AND_TAILS
	//  - 0x05eb72	-> global.characters = CHARS_SONIC_ALONE
	//  - 0x05eb88	-> global.characters = CHARS_TAILS_ALONE
	//  - 0x05eb9e	-> global.characters = CHARS_KNUCKLES_ALONE
	call tableLookupAddress(0x05eb6a,(Mighty_Pilot == 0) ? (2 * 2) : (global.characters * 2)) // Tails or Sonic pilots the plane
}

#if STANDALONE
function bool onCharacterPressedJumpInMidAir(u8 input_state, u8 input_pressed)
{
	if (XtraChar != 1 || global.characters != CHARS_SONIC_AND_TAILS)
	{
		return base.onCharacterPressedJumpInMidAir(input_state, input_pressed)
	}
	// The following is only relevant for first player if having Tails as second character
	if (A0 == 0xffffb000 && isSecondCharacter(CHARACTER_TAILS))
	{
		// Start Tails Assist flight?
		if (Game.getSetting(SETTING_TAILS_ASSIST_MODE) != 0 && (input_state & CONTROL_UP))
		{
			if (tails.control_counter == 0 && tails.ai_routine == 0x06 && abs(s16[0xffffb05a] - s16[0xffffb010]) < 0xc0 && abs(s16[0xffffb05e] - s16[0xffffb014] + 0x40) < 0x80)
			{
				// Tails must not already be flying already, and ready for flying
				if (u8[0xffffb04a + 0x20] == char.state.ROLLING && u8[0xffffb04a + 0x40] == 1)	// char.jumping must be set
				{
					A0 = 0xffffb04a
					TailsStartFlight()
					char.velocity.y = max(char.velocity.y, -0x200)	// Limit Tails' velocity
					tails.ai_routine = 0x30		// No valid value in vanilla, but we're using it for the Tails Assist flight routine
					tails.catch_timeout = 0
					A0 = 0xffffb000

					// No further reaction to jump button if:
					//  - it would activate the fire or bubble shield
					//  - Knuckles would start gliding
					bool preventAction = true
					return (MightyWallCollision != 0) ? preventAction : !preventAction
				}
			}
		}
	}

	// Use normal jump button reaction
	return true
}
#endif

// SOZ Sandflow
// All that's changed here is the addition of 1 value to both functions
//# address-hook(0x03fd4e) end(0x03fe42)
function void fn03fd4e()
{
	if (XtraChar != 1)
	{
		base.fn03fd4e()
		return
	}

	u16 dx = objA1.position.x.u16 - objA0.position.x.u16 + 0x10
	u16 dy = objA1.position.y.u16 - objA0.position.y.u16 + D2.u16
	u8 bit = (1 << D6.u8)

	if ((objA0.flags2a & bit) == 0)
	{
		if (dx < 0x20 && dy < D3.u16)
		{
			if (u8[A1 + 0x2a] & char.flag.IN_AIR && (u8[A1 + 0x2a] & char.flag.ON_OBJECT) == 0 && u8[A1 + 0x05] < 0x04 && u8[A1 + 0x2e] == 0)
			{
				u8[A1 + 0x28] |= 0x01 // Mighty's in the sandflow
				u8[A1 + 0x0d] &= ~0x02 // Turn off the hammer drop animation
				BubbleDrop = false

				objA0.flags2a |= bit

				u8[A1 + 0x1e] = 0x0e
				u8[A1 + 0x1f] = 0x07
				objA1.state = char.state.ROLLING
				objA1.flags2a |= (char.flag.ROLLING | char.flag.ON_OBJECT)
				objA1.flags2a &= ~char.flag.CONTROL_LOCK
				u8[A1 + 0x2f] = 0
				u8[A1 + 0x40] = 0
				objA1.velocity.y >>= 1
				objA1.velocity.x >>= 1
			}
		}
	}
	else
	{
		if (dx < 0x20 && dy < D3.u16)
		{
			if (u8[A1 + 0x2a] & char.flag.IN_AIR)
			{
				// Check if jump button pressed
				if (D5.u16 & CONTROL_ABC)
				{
					objA1.velocity.y = -0x800
					playSound(SFX_JUMP)
				}

			#if STANDALONE
				bool pressInDirection = ((D5.u16 >> 8) & ((objA1.velocity.x < 0) ? CONTROL_LEFT : CONTROL_RIGHT)) != 0
				if (pressInDirection)
				{
					// Give player a bit more control over movement speed
					objA1.velocity.x = objA1.velocity.x * 3/4
				}
				else
			#endif
				{
					objA1.velocity.x >>= 1
				}

				if (objA1.velocity.y < 0)
				{
					objA1.velocity.y += 0x68
				}
				else
				{
					objA1.velocity.y = (objA0.flags2a & 0x02) ? -0x198 : 0xa8
				}
				return
			}
		}
		u8[A1 + 0x28] &= ~0x01 // Mighty's out of the sandflow
		u8[A1 + 0x2a] &= ~char.flag.ON_OBJECT
		objA0.flags2a &= ~bit
	}
}

//# address-hook(0x03fe70) end(0x03ff7e)
function void fn03fe70()
{
	if (XtraChar != 1)
	{
		base.fn03fe70()
		return
	}

	u8 bit = (1 << D6.u8)

	if (u8[A2] != 0)
	{
		--u8[A2]
		return
	}

	u16 dx = objA1.position.x.u16 - objA0.position.x.u16 + D2.u16
	u16 dy = objA1.position.y.u16 - objA0.position.y.u16 + 0x10

	if ((objA0.flags2a & bit) == 0)
	{
		if (dx < D3.u16 && dy < 0x20)
		{
			if (u8[A1 + 0x2a] & char.flag.IN_AIR && (u8[A1 + 0x2a] & char.flag.ON_OBJECT) == 0 && u8[A1 + 0x05] < 0x04 && u8[A1 + 0x2e] == 0 && objA1.velocity.y >= 0)
			{
				u8[A1 + 0x28] |= 0x01 // Mighty's in the sandflow
				u8[A1 + 0x0d] &= ~0x02 // Turn off the hammer drop animation
				BubbleDrop = false
				
				u8[A1 + 0x2a] |= char.flag.ON_OBJECT
				objA0.flags2a |= bit
				u8[A1 + 0x1e] = 0x0e
				u8[A1 + 0x1f] = 0x07
				u8[A1 + 0x20] = char.state.ROLLING
				u8[A1 + 0x2a] |= char.flag.ROLLING
				objA1.flags2a &= ~char.flag.CONTROL_LOCK
				u8[A1 + 0x2f] = 0
				u8[A1 + 0x40] = 0
				objA1.velocity.y >>= 1
				objA1.velocity.x >>= 1
			}
		}
	}
	else
	{
		if (dx < D3.u16 && dy < 0x20)
		{
			if (u8[A1 + 0x2a] & char.flag.IN_AIR)
			{
				// Check if jump button pressed
				D5.u16 &= CONTROL_ABC
				if (D5.u16 != 0)
				{
					objA1.velocity.y = 0x0400
					u8[A1 + 0x2a] &= ~char.flag.ON_OBJECT
					objA0.flags2a &= ~bit

					u8[A2] = 0x1e
					playSound(SFX_JUMP)
				}
				else
				{
					objA1.velocity.y = 0
				#if STANDALONE
					// Give player a bit more control over movement speed
					objA1.velocity.x = objA1.velocity.x * 3/4
				#else
					objA1.velocity.x >>= 1
				#endif
					u32[A1 + 0x10] += (objA0.flags2a & 0x01) ? -0xb000 : 0xb000
				}
				return
			}
		}
		u8[A1 + 0x28] &= ~0x01 // Mighty's out of the sandflow
		objA1.velocity.y = 0
		u8[A1 + 0x2a] &= ~char.flag.ON_OBJECT
		objA0.flags2a &= ~bit
	}
}