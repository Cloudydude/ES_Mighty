global u8 Zone_Banner
global u8 Banner_Text
global u8 Display_Banner
global u8 Mighty_Banner_Text

global u8 board_angle
global bool Turn_the_Board

function bool ESS_drawchar_Es(s16 px, s16 py, bool no_save, u8 ES_val)
{
	if (ES_val == 0x01)
	{
		s16 posx = no_save ? px + 0x2f : px + 0x2f
		if (Mighty_Partner == 0x01)
			posx -= 0x03
		s16 posy = no_save ? py + 0x3f : py + 0x89
		objA0.animation.timer = ES_val
		
		ExtraChar.DataSelect.drawCharacterSprite(posx, posy, 0x9fff)
		return true
	}
	
	return base.ESS_drawchar_Es(px, py, no_save, ES_val)
}

function s32 ESS_saveboxgetcolor_Es(u8 ES_val)
{
	if (ES_val == 0x01)
		return 0x00906c
	
	return base.ESS_saveboxgetcolor_Es(ES_val)
}

function void ExtraChar.DataSelect.drawCharacterSprite(s16 px, s16 py, u16 renderQueue)
{
	bool IsRayaPartner = (Mods.isModActive("Extra Slot Ray") && (System.getGlobalVariableValueByName("Ray_Partner") == 3 || System.getGlobalVariableValueByName("Ray_Partner") == 4))

#if EXTRA_SAVE_SLOTS_ACTIVE
	if (objA0.animation.timer == 0x01 || u8[A3 + 0x24] == 0x01)
#else
	if (objA0.animation.timer == 0x01)
#endif
	{
		u8 atex = getatex(0x01)
		string key = Mods.isModActive("Mania Style Data Select") ? "dataSel_character_mighty" : getMightySprite()
		
		if (Mighty_Partner == 1)
		{
			// Mighty
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px - 0x07, py, atex, SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X, renderQueue)

			// Mighty_Partner
			if (IsRayaPartner)
			{
				// Call the base function
				base.ExtraChar.DataSelect.drawCharacterSprite(px, py, renderQueue)
				return
			}
			else
			{
				if (Renderer.hasCustomSprite("dataSel_character_tails"))
					Renderer.drawCustomSprite("dataSel_character_tails", px+7, py-2, 0x60, SPRITE_FLAG_PRIO | SPRITE_FLAG_FLIP_X, renderQueue)
				else
					Standalone.drawCharacterSpriteDirect(CHARACTER_TAILS, px+6, py-18, 0xa6, 0x00 | SPRITE_FLAG_FLIP_X, 0x60, renderQueue)
			}
		}
		else
		{
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px, py, atex, SPRITE_FLAG_PRIO, renderQueue)
		}
		return
	}
	
	// Call the base function
	base.ExtraChar.DataSelect.drawCharacterSprite(px, py, renderQueue)
}

function void ExtraChar.DataSelect.drawCharacterIconsSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 0x01)
	{
		u8 atex = getatex(0x01)
		string key
		if (Mods.isModActive("Data Select Character Sprites - MAIN"))
		{
			if (System.getGlobalVariableValueByName("MenuStyle.dataSelect") != 0)
			{
				if (System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1)
				{
					key = (Mods.isModActive("Mania Style Data Select")) ? "dataSel_life_mighty" : (Mighty_Sprite_type == 0) ? "dataSel_life_slot1" : "dataSel_life_slot1_S3"
				}
				else
				{
					key = LivesandContinues()
				}
				if (Renderer.hasCustomSprite(key))
				{
					if (u8[A0 + 0x05] == 0x01 && u8[A0 + 0x08] != 0x01)
					{
						Renderer.drawCustomSprite(key, px-16, py + ((System.getGlobalVariableValueByName("MenuStyle.noContinues") == 1) ? 24 : 8), atex, SPRITE_FLAG_PRIO, renderQueue)
					}
				}
			}
		}
		else
		{
			key = LivesandContinues()
			if (Renderer.hasCustomSprite(key))
			{
				if (u8[A0 + 0x05] == 0x01 && u8[A0 + 0x08] != 0x01)
				{
					Renderer.drawCustomSprite(key, px-16, py + 8, atex, SPRITE_FLAG_PRIO, renderQueue)
				}
			}
		}
		
		key = LivesandContinues()
		if (Renderer.hasCustomSprite(key))
		{
			if (u8[A0 + 0x05] == 0x01 && u8[A0 + 0x08] != 0x01)
			{
				Renderer.drawCustomSprite(key, px-16, py + 8, atex, SPRITE_FLAG_PRIO, renderQueue)
			}
		}
		return
	}
	
	// Call the base function
	base.ExtraChar.DataSelect.drawCharacterIconsSprite(px, py, renderQueue)
}

function void ExtraChar.Competition.drawCharacterSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 0x01)
	{
		u8 atex = getatex(0x01)
		string key = Mods.isModActive("Mania Style Data Select") ? "dataSel_character_mighty" : getMightySprite()
		Renderer.drawCustomSprite(key, px, py, atex, SPRITE_FLAG_PRIO, renderQueue)
		return
	}
	
	// Call the base function
	base.ExtraChar.Competition.drawCharacterSprite(px, py, renderQueue)
}

function void ExtraChar.Competition.drawCharacterContinueSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 0x01)
	{
		u8 atex = getatex(0x01)
		string key = Special_Continue_icons()
		Renderer.drawCustomSprite(key, px, py, atex, 0x00, renderQueue)
		return
	}
	
	// Call the base function
	base.ExtraChar.Competition.drawCharacterContinueSprite(px, py, renderQueue)
}

function void ExtraChar.Challenges.drawCharacterContinueSprite(u8 xtrachar, s16 px, s16 py, u8 flags, u16 renderQueue)
{
	if (xtrachar == 0x01)
	{
		string key = "ESS_Cont_Es1"
		Renderer.drawCustomSprite(key, px, py, 0x00, flags, renderQueue)
		return
	}
	
	// Call the base function
	base.ExtraChar.Challenges.drawCharacterContinueSprite(xtrachar, px, py, flags, renderQueue)
}

// The function determines the special options of the character palettes, and loads them into memory.
function void ExtraChar.loadSpecialPalettes(u8 xtrachar, u32 targetAddress, u8 paletteVariant)
{
	if (xtrachar == 0x01)
	{
		if (Mighty_Grays == 1 && (MightyPalette != 0 || MightyPalette != 4 || MightyPalette != 5))
	    {
	        u16[targetAddress + 2 * 12] = (paletteVariant != 0) ? 0x0eac : 0x0ecc
	        u16[targetAddress + 2 * 13] = (paletteVariant != 0) ? 0x0c8a : 0x0caa
	        u16[targetAddress + 2 * 14] = (paletteVariant != 0) ? 0x0846 : 0x0866
	    }
		
		return
	}
	
	base.ExtraChar.loadSpecialPalettes(xtrachar, targetAddress, paletteVariant)
}


function string MegamixHud.getCharName_ES1()
{
	return "Mighty"
}

function string LivesandContinues()
{
	return (Mods.isModActive("Mania Style Data Select")) ? "dataSel_lifeContinue_mighty" : (Mighty_Sprite_type == 0) ? "dataSel_lifeContinue_slot1" : "dataSel_lifeContinue_Mighty_S3"
}

global bool DONT
//# address-hook(0x08555e) end(0x08558e)
function void fn08555e()
{
    base.fn08555e()

	if ((global.framecounter % 2) == 0x00 && XtraChar == 0x01)
	{
		if (objA0.update_address != 0x01abb6)
		{
			DONT = true
		}
	}
}

global bool Move_Mighty
function void ExtraChar.Character.onEndingLogo.fade()
{
	if (XtraChar == 0x01)
		Move_Mighty = true
	base.ExtraChar.Character.onEndingLogo.fade()
}

//# address-hook(0x05f2ea) end(0x05f2f2)
function void fn05f2ea()
{
	DONT = false // need this for the hyper ending
	base.fn05f2ea()
}

//# address-hook(0x05f5de) end(0x05f64e)
function void fn05f5de()
{
	DONT = false // need this for the super ending
	base.fn05f5de()
}

//# address-hook(0x05d9ee) end(0x05da4e)
function void fn05d9ee()
{
	// Falling from space
	if (XtraChar == 1 && Mods.isModActive("Extra Slot Ray") && Mighty_Pilot == 2 && (System.getGlobalVariableValueByName("Ray_Partner") <= 2))
	{
		ExtraChar.loadCharacterPalette(0x02, 0x802080 + u32(0x01 * 0x80), 0x00)
		ExtraChar.loadSpecialPalettes(0x02, CHARACTER_TAILS, 0x802080 + u32(0x01 * 0x80), 0x00)
	}
	
	base.fn05d9ee()
}

// Here so that Mighty's palette loads for Knuckles' ending
//# address-hook(0x05b2d4) end(0x05b2d4)
function void fn05b2d4()
{
	if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		loadCharacterPalette(3, 0x802240, 0) // Mighty palette
		Mightys_Grays()
	}
	base.fn05b2d4()
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	u64 key
	u64 paletteKey
	u8 atex
	u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	bool Mania_Title_Cards = (Mods.isModActive("Sonic mania Title Cards4.5") || Mods.isModActive("Sonic mania Title Cards Encore4.5") || Mods.isModActive("Sonic Mania Title Cards 5.0") || Mods.isModActive("Sonic Mania Title Cards 5.0 encore") || Mods.isModActive("Sonic Mania Title Cards FULL") || Mods.isModActive("Sonic Mania Title Cards FULLSonic Mania Title Cards FULL ENCORE"))
	bool IsRayaPartner = (Mods.isModActive("Extra Slot Ray") && (System.getGlobalVariableValueByName("Ray_Partner") == 3 || System.getGlobalVariableValueByName("Ray_Partner") == 4)) 

	// Secret Screen
	if (objA0.update_address == 0x05f2ea || objA0.update_address == 0x05f46a)
	{
		if (Rand == 1)
		{
			Standalone.playAudio(0x28)
			key = "migty"
			Renderer.drawCustomSprite(key, getScreenExtend() + 70, 0, 0, 0x40, 0xffff)
			return true
		}
	}

	// Best ending screen
	if (objA0.update_address == 0x1ffbe0 || objA0.update_address == 0x1ffbd0)
	{
		if (objA0.value3a == 0x01)
		{
			u8 Character = 3
			atex = 0x40 + Character * 0x20
			
			if (Mighty_Sprite_type == 0)
				key = (objA0.animation.sprite == 0x01 ? "character_slot1_0xbd": objA0.animation.sprite == 0x02 ? "character_slot1_0xbe": objA0.animation.sprite == 0x03 ? "character_slot1_0xb0": "character_slot1_0xb1")
			else
				key = (objA0.animation.sprite == 0x01 ? "character_slot1_S3_0xbd": objA0.animation.sprite == 0x02 ? "character_slot1_S3_0xbe": objA0.animation.sprite == 0x03 ? "character_slot1_S3_0xb0": "character_slot1_S3_0xb1")
			
			Renderer.drawCustomSprite(key, px, py, atex, flags, objA0.value42 + 0xff)
			return true
		}
	}
	
	// Dust clouds
	if (objA0.update_address == 0x2000D4) || (objA0.update_address == 0x2000D6)
	{
		py -= 2
		key = stringformat("dust_%d", objA0.value26)
		u32 scale = 0x3000 + abs(objA0.state) * 1500
		scale = 0x10000
		Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue, 0, 0xffffffff, scale)
		
		if (objA0.state < 60)
		{
			s8 sign = objA0.velocity.x / abs(objA0.velocity.x)
			Renderer.drawCustomSprite(key, px + 6 * sign, py, 0, flags, renderQueue, 0, 0xffffffff, scale - 0x1000)
		}
		return true
	}		

	if (u8[A0 + 0x38] == 0xff && objA0.animation.sprite == 5 && objA0.animation.timer == 1 && u16[0xffffb04a + 0x30] == 0)
	{	
		u64 portrait = 0
		if (u8[A0 + 0x23] == 0x18)
			portrait = "dataSel_savePortrait_slot1"
		else if (u8[A0 + 0x23] == 0x19)
			portrait = "dataSel_savePortrait_superslot1"
		else if (u8[A0 + 0x23] == 0x1b)
			portrait = "Clear_slot1"
		if (Renderer.hasCustomSprite(portrait))
		{
		#if GAMEAPP >= 0x22051500
			Renderer.drawCustomSprite(portrait, px, py - ((Mods.isModActive("Data Select Character Sprites - MAIN") && System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0) ? 8 : 0), 0, SPRITE_FLAG_PRIO, renderQueue)
		#endif
		#if GAMEAPP <= 0x22050800
			Renderer.drawCustomSprite(portrait, px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
		#endif
			u8[A0 + 0x23] = 0
		}
	}
    
	if (XtraChar == 1)
	{
		if (objA0.update_address == 0x0837b2) //SIGNPOST
		{
			if (objA0.animation.sprite == 0x00 && Mighty_Sprite_type)//MIGHTY
			{		
				atex = 0x40 + 0x20 * getMainCharacter()
				Renderer.drawCustomSprite("signpost_slot1_S3_0x00", px, py, atex, flags , renderQueue)
				return true
			}           
		}

		// Surfboard intro
		if (objA0.update_address == 0x220b8c || objA0.update_address == 0x220c06 || objA0.update_address == 0x220c94)
		{
			key = stringformat( ((Mighty_Sprite_type == 1) ? "Hang_10_S3_0x%02x" : "Hang_10_Mania_0x%02x"), objA0.animation.sprite)
			atex = 0x40 + 0x20 * getMainCharacter()
			Renderer.drawCustomSprite(key, px, py, atex, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
			return true
		}
		else if (objA0.update_address == 0x2212ea) // Surfboard after Mighty dismounts
		{
			key = stringformat("Surfboard_Mighty_0x%02x", objA0.animation.sprite)
			
			if (objA0.animation.sprite == 1)
				board_angle = (Turn_the_Board) ? 0x80 : 0
			else if (objA0.animation.sprite == 4)
				Turn_the_Board = (board_angle == 0) ? true : false

			atex = 0x40 + 0x20 * getMainCharacter()
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, board_angle, 255)
			return true
		}

		if (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e || objA0.update_address == 0x02eac8)
		{
			// Load Mighty's palette so that the icons and text aren't blank
			u32 offset = CHARACTER_SONIC * 0x40
			u32 dest   = 0x802000 + offset
			zeroMemory(dest, 0x40)
			u16 numColors = System.loadExternalPaletteData(getCharacterPaletteKey(CHARACTER_SONIC), 0, 0x800000, 0x20)
			for (u16 i = 0; i < numColors; ++i)
			{
				u32 rgba = u32[0x800000 + i * 4]
				u16[dest + i * 2] = (rgba & 0xff000000) ? packColorExt(rgba) : 0
			}
			if (Mighty_Grays == 1 && (MightyPalette != 0 || MightyPalette != 4 || MightyPalette != 5))
			{
				u16[dest + 2 * 12] = 0x0ecc
				u16[dest + 2 * 13] = 0x0caa
				u16[dest + 2 * 14] = 0x0866
			}
		}
		
		// CHARACTERS TEXTS FOR BLUESPHERES
		//  - Character name			-> objA0.animation.sprite = 0x13 ... 0x16
		// objA0.animation.sprite:
		//  - 0x17, 0x31, 0x36 = "Score"
		//  - 0x18, 0x32, 0x37 = "Ring Bonus"
		//  - 0x19, 0x33, 0x38 = "Perfect"
		//  - 0x1a, 0x34, 0x39 = "Continue"
		//  - 0x12			   = "Super/Hyper"
		//  - 0x13			   = "Sonic"
		//  - 0x14			   = "Miles" (not verified)
		//  - 0x15			   = "Tails"
		//  - 0x16			   = "Knuckles" (not verified)
		//  - 0x23			   = "got a"
		//  - 0x24			   = "Chaos Emerald"
		//  - 0x30			   = "Super Emerald"
		if (gameMode == 0x48 || gameMode == 0x0c)	// Blue Spheres results + fade to main game afterwards
		{
								// Blue Spheres results texts							// CHARACTER TEXT
			if (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e || objA0.update_address == 0x02dd98)
			{
				bool isSKStage = (global.lock_on_state == 0 && global.sk_bluespheres)
				u8 Y_adjust = ((Mods.isModActive("Megamix 5.0 Hud") && System.getGlobalVariableValueByName("Mighty_hud_type") == 3) ? 0x9 : 0x8)
				if (objA0.animation.sprite == 0x13 || objA0.animation.sprite == 0x16) // MIGHTY
				{
					bool adjustforS3stages
					bool adjustforSKstages
//					bool adjustforallemeralds
					if (!Mods.isModActive("Megamix 5.0 Hud"))
					{
						adjustforS3stages = (!isSKStage && global.chaos_emeralds != 7)
						adjustforSKstages = (isSKStage && global.super_emeralds != 7)
//						adjustforallemeralds = (global.super_emeralds == 7)
					}
					if (Mania_Title_Cards)
						Renderer.drawCustomSprite("Result_NamePlate_Mighty", (objA0.animation.sprite == 0x13) ? px - 18 : px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue - 50)
					else if (System.getGlobalVariableValueByName("Mighty_hud_type") == 1)
					{
						key = "Mighty_Mania_Plate"
						if (objA0.animation.sprite == 0x13)
						{
							Renderer.drawCustomSprite(key, px - 0x15, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
						}
						else
						{
							u8 X_adjust = (adjustforS3stages || adjustforSKstages) ? 0x0d : 0x10
							if (A0 == 0xffffbde0 || A0 == 0xffffc2ca) // Now Mighty can
								Renderer.drawCustomSprite(key, px + 0x10, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
							else if (A0 == 0xffffbf08 || A0 == 0xffffc3f2) // be super/hyper
								Renderer.drawCustomSprite(key, px + 0x1f, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
							else if (A0 == 0xffffbd96) // Mighty 
								Renderer.drawCustomSprite(key, px + X_adjust, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
						}
					}
					else
					{
						key = (Mods.isModActive("Megamix 5.0 Hud") && System.getGlobalVariableValueByName("Mighty_hud_type") == 3) ? "MegaMix" : "mighty_text"
						if (objA0.animation.sprite == 0x13)
						{
							Renderer.drawCustomSprite(key, px + 0x19 , py + Y_adjust, 0x40, SPRITE_FLAG_PRIO, renderQueue)
						}
						else
						{
							u8 X_adjust = (adjustforS3stages) ? 0x3c : (adjustforSKstages) ? 0x3b : 0x3d
							// all emeralds
							if (A0 == 0xffffbde0 || A0 == 0xffffc2ca) // Now Mighty can
								Renderer.drawCustomSprite(key, px + 0x3f, py + Y_adjust, 0x40, SPRITE_FLAG_PRIO, renderQueue)
							else if (A0 == 0xffffbf08 || A0 == 0xffffc3f2) // be super/hyper
								Renderer.drawCustomSprite(key, px + 0x4b, py + Y_adjust, 0x40, SPRITE_FLAG_PRIO, renderQueue)
							else if (A0 == 0xffffbd96) // Mighty 
								Renderer.drawCustomSprite(key, px + X_adjust, py + Y_adjust, 0x40, SPRITE_FLAG_PRIO, renderQueue)
						}
					}
					return true
				}

				if (objA0.animation.sprite == 0x12)
				{
					if (global.super_emeralds == 7) // HYPER
					{
						Renderer.drawCustomSprite(((Mania_Title_Cards) ? "Result_NamePlate_HyperK" : (System.getGlobalVariableValueByName("Mighty_hud_type") == 1) ? "Hyper_Mania_Plate" : (Mods.isModActive("Megamix 5.0 Hud") && System.getGlobalVariableValueByName("Mighty_hud_type") == 3) ? "Hyper_text_MegaMix" : "Hyper_text"), px + 0x10, py, 0x40, SPRITE_FLAG_PRIO, renderQueue)
						return true
					}
					else // SUPER
					{
						Renderer.drawCustomSprite(((Mania_Title_Cards) ? "Result_NamePlate_SuperK" : (System.getGlobalVariableValueByName("Mighty_hud_type") == 1) ? "Super_Mania_Plate" : (Mods.isModActive("Megamix 5.0 Hud") && System.getGlobalVariableValueByName("Mighty_hud_type") == 3) ? "Super_text_MegaMix" : "Super_text"), px + 0x10, py, 0x40, SPRITE_FLAG_PRIO, renderQueue)
						return true
					}
				}
				if (objA0.animation.sprite == 0x17 || objA0.animation.sprite == 0x31 || objA0.animation.sprite == 0x36)
				{
					Renderer.drawCustomSprite(getCharacterBonusTextIcon(getMainCharacter()), px-60, py-5, 0, SPRITE_FLAG_PRIO, renderQueue-1)
					if (System.getGlobalVariableValueByName("Mighty_hud_type") == 1)
					{
						Renderer.drawCustomSprite("hud_text_score_mania", px - 96, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						HUD.drawNumber("hud_digit_%d_mania", player.score * 10, px + 88, py, renderQueue)
					}
					else
					{
						Renderer.drawCustomSprite(isSKStage ? stringformat("hud_text_score_superstage%s", Hud_Names) : stringformat("hud_text_score_chaosstage%s", Hud_Names), px - 96, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						HUD.drawNumber(isSKStage ? "hud_digit_%d%s" : "hud_digit_%d_chaosstage%s", player.score * 10, px + 88, py, renderQueue)
					}
					return true
				}
				else if (objA0.animation.sprite == 0x18 || objA0.animation.sprite == 0x32 || objA0.animation.sprite == 0x37)
				{
					Renderer.drawCustomSprite(getCharacterBonusTextIcon(getMainCharacter()), px+77, py-5, 0, SPRITE_FLAG_PRIO, renderQueue-1)
					if (System.getGlobalVariableValueByName("Mighty_hud_type") == 1)
					{
						Renderer.drawCustomSprite("hud_text_ring_stage_mania", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						Renderer.drawCustomSprite("hud_text_bonus_stage_mania", px + 40, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						HUD.drawNumber("hud_digit_%d_mania", results.ring_bonus * 10, px + 184, py, renderQueue)
					}
					else
					{
						Renderer.drawCustomSprite(isSKStage ? stringformat("hud_text_ring_superstage%s", Hud_Names) : stringformat("hud_text_ring_chaosstage%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						Renderer.drawCustomSprite(isSKStage ? stringformat("hud_text_bonus_superstage%s", Hud_Names) : stringformat("hud_text_bonus_chaosstage%s", Hud_Names), px + 40, py, 0, SPRITE_FLAG_PRIO, renderQueue+1)
						HUD.drawNumber(isSKStage ? "hud_digit_%d%s" : "hud_digit_%d_chaosstage%s", results.ring_bonus * 10, px + 184, py, renderQueue)
					}
					return true
				}
				else if (objA0.animation.sprite == 0x19 || objA0.animation.sprite == 0x33 || objA0.animation.sprite == 0x38)
				{
					Renderer.drawCustomSprite(getCharacterBonusTextIcon(getMainCharacter()), px+52, py-5, 0, SPRITE_FLAG_PRIO, renderQueue-1)
					if (System.getGlobalVariableValueByName("Mighty_hud_type") == 1)
					{
						Renderer.drawCustomSprite("hud_text_perfect_mania", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						HUD.drawNumber("hud_digit_%d_mania", results.time_bonus * 10, px + 184, py, renderQueue)
					}
					else
					{
						Renderer.drawCustomSprite(isSKStage ? stringformat("hud_text_perfect_superstage%s", Hud_Names) : stringformat("hud_text_perfect_chaosstage%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
						HUD.drawNumber(isSKStage ? "hud_digit_%d%s" : "hud_digit_%d_chaosstage%s", results.time_bonus * 10, px + 184, py, renderQueue)
					}
					return true
				}
				else if (objA0.animation.sprite == 0x1a || objA0.animation.sprite == 0x34 || objA0.animation.sprite == 0x39)
				{
					Renderer.drawCustomSprite(getCharacterBonusTextIcon(getMainCharacter()), px+60, py-5, 0, SPRITE_FLAG_PRIO, renderQueue-1)
					if (System.getGlobalVariableValueByName("Mighty_hud_type") == 1)
						Renderer.drawCustomSprite("hud_text_continue_stage_mania", px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
					else
						Renderer.drawCustomSprite(isSKStage ? stringformat("hud_text_continue_superstage%s", Hud_Names) : stringformat("hud_text_continue_chaosstage%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
					return true
				}
							
			}
			else if (objA0.update_address == 0x02ea5a || objA0.update_address == 0x02ea64)
			{
				// Do not render the numbers for rings and perfect bonus, they will get rendered with the texts already (see above)
				return true
			}
		}
		// Level results texts
		if (objA0.update_address == 0x02dd98)
		{
			if (objA0.animation.sprite == 0x0b)
			{
				Renderer.drawCustomSprite(getCharacterBonusTextIcon(getMainCharacter()), px+36, py-5, 0, SPRITE_FLAG_PRIO, renderQueue-1)
				Renderer.drawCustomSprite(stringformat("hud_text_total%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
				return true
			}
			else if (objA0.animation.sprite == 0x0c)
			{
				Renderer.drawCustomSprite(getCharacterBonusTextIcon(getMainCharacter()), px+37, py-5, 0, SPRITE_FLAG_PRIO, renderQueue-1)
				Renderer.drawCustomSprite(stringformat("hud_text_bonus%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue+1)
				return true
			}
			else if (objA0.animation.sprite == 0x0d)
			{
				Renderer.drawCustomSprite(stringformat("hud_text_ring%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
				return true
			}
			else if (objA0.animation.sprite == 0x0e)
			{
				Renderer.drawCustomSprite(stringformat("hud_text_time%s", Hud_Names), px, py, 0, SPRITE_FLAG_PRIO, renderQueue-2)
				return true
			}
		}
		// Tornado Intro
		if (objA0.update_address == 0x0677ce || objA0.update_address == 0x067800)
		{
			atex = 0
			if (Mighty_Pilot == 0)
				key = "sonic_in_tornado"
			else if (Mighty_Pilot == 2 && Mods.isModActive("Extra Slot Ray"))
			{
				if (System.getGlobalVariableValueByName("Ray_Partner") <= 2)
				{
					ExtraChar.loadCharacterPalette(0x02, 0x802080 + u32(0x01 * 0x80), 0x00)
					ExtraChar.loadSpecialPalettes(0x02, CHARACTER_TAILS, 0x802080 + u32(0x01 * 0x80), 0x00)
					atex = 0x60
				}
				key = (System.getGlobalVariableValueByName("Ray_Sprite_type")) ? "S3_ray_in_tornado" : "Mania_ray_in_tornado"
			}
			else
			{
				return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
			}
			Renderer.drawCustomSprite(key, px, py - 16, atex, flags, renderQueue + 2)
			Renderer.addSpriteMask(px - 11, py - 28, 23, 20, renderQueue + 1, 8000)
			return false
		}
		// Intro plane fix for Mighty
		if ((objA0.update_address == 0x067472 || (isSonicIntro() && objA0.update_address == 0x01abb6 && objA0.base_state == 0x1A)))
		{
			if (objA0.animation.sprite == 0xba && (Mods.isModActive("Mania Tornado Animation")))			
			{
				u8 animation = ((level.framecounter >> 2) % 2)
				if (Mighty_Sprite_type == 0)
					key = stringformat("Mighty_tornado_0%d", animation)
				else
					key = stringformat("S3_Mighty_tornado_0%d", animation)
			}
			else
			{
				if (Mighty_Sprite_type == 1)
					key = (objA0.animation.sprite == 0x21 ? "S3_mighty_fly_0": objA0.animation.sprite == 0x22 ? "S3_mighty_fly_1": "character_slot1_S3_0x%02x")
				else
					key = (objA0.animation.sprite == 0x21 ? "mighty_fly_0": objA0.animation.sprite == 0x22 ? "mighty_fly_1": "character_slot1_0x%02x")
			}
			atex = 0x40 + getMainCharacter() * 0x20
			Renderer.drawCustomSprite(stringformat(key, objA0.animation.sprite), px, py, atex, flags, renderQueue)
			return true
		}
	//ENDING
		// Normal sized
		else if (objA0.update_address == 0x05ebb4 && Mighty_Pilot == 2 && Mods.isModActive("Extra Slot Ray"))
		{
			atex = 0
			if (System.getGlobalVariableValueByName("Ray_Partner") <= 2)
			{
				atex = 0x60
			}
			key = (System.getGlobalVariableValueByName("Ray_Sprite_type")) ? "S3_ray_in_tornado" : "Mania_ray_in_tornado"
			Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
			return true
		}
		//small characters on the tornado
		//this object address is for BOTH the character ON the plane and the driver!
		//check its subtype as well
		if (objA0.update_address == 0x05ed18) //standing character
		{
			if (objA0.subtype2c != 0) //standing character
			{
				atex = 0x40 + getMainCharacter() * 0x20
				key = (Mighty_Sprite_type == 0) ? "MightyMini" : "Mini_Mighty_S3"
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, 0, 255)		
				return true
			}
			else //pilot
			{ // DON'T RENDER HERE
				if (Mighty_Pilot == 2 && Mods.isModActive("Extra Slot Ray"))
				{
					atex = (System.getGlobalVariableValueByName("Ray_Partner") <= 2) ? 0x60 : 0
					key = (System.getGlobalVariableValueByName("Ray_Sprite_type")) ? "Small_S3_Ray" : "Small_Mania_Ray"
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, 0, 255)		
					return true
				}
				else
					return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
			}
		}
		//small and micro plane
		//small plane and micro outside
		//0x05d86a is contemporarily the small tornado flying right and the micro one flying left!
		if (objA0.update_address == 0x05d86a)
		{   
			//if flying left use the micro character
			if (char.render_flags & 0x01)
			{
				atex = 0x40 + 0x20 * getMainCharacter()
				key = "MightyMicro"
				u64 pilot = (Mighty_Pilot == 0) ? "Micro_Sonic" : "Micro_Tails"


				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue+1) // Mighty on the plane
				Renderer.drawCustomSprite(pilot, px, py, 0, flags, renderQueue+1) // The pilot and the plane
				Renderer.addSpriteMask(px - 11, py - 28, 23, 20, renderQueue + 1, 8000)
				//Renderer.drawCustomSprite(plane, px, py, 0, flags, renderQueue+1) // The pilot and the plane
				//return true
			}
			else
			{ //this would be the small tornado, so render normally.
				return false
			}		
		}
		// Ending pose
		if (objA0.update_address == 0x05e18a)
		{
			key = (outro.ending_type < 0) ? stringformat("MightyPose_0x%02x", objA0.animation.sprite) : "MightyPose_0x01"
			if (outro.ending_type >= 0 && !DONT)
				SuperandHyperPalette()
			if (Renderer.hasCustomSprite(key))
			{
				Renderer.drawCustomSprite(key, px, py, 0x40, SPRITE_FLAG_FLIP_X, renderQueue)
				return true
			}
		}

		// Continue Screen
		if (global.game_mode == 0x14)
		{
			// Continue Icons
			if (objA0.update_address == 0x05ca5c)
			{
				key = Animated_Continue_icons()
				Renderer.drawCustomSprite(key, px, py, 0x40, flags, renderQueue)
				return true
			}
			// Mighty waiting and running
			if (Mighty_Partner == 0) // Mighty with a Mighty_Partner
			{
				if (objA0.update_address == 0x05c660)
				{
					atex = 0x40 + getMainCharacter() * 0x20
					if (objA0.animation.sprite >= 0xbd && objA0.animation.sprite <= 0xbe)
						key = stringformat((Mighty_Sprite_type == 0) ? "Continue_0x%02x" : "Continue_S3_0x%02x", objA0.animation.sprite)
					else
						key = stringformat((Mighty_Sprite_type == 0) ? "character_slot1_0x%02x" : "character_slot1_S3_0x%02x", objA0.animation.sprite)
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
					return true
				}
			}
			else // Mighty by himself
			{
				if (objA0.update_address == 0x05c55c || objA0.update_address == 0x05c588)
				{
					atex = 0x40 + getMainCharacter() * 0x20
					if (objA0.animation.sprite >= 0 && objA0.animation.sprite <= 1)
					{
						key = (Mighty_Sprite_type == 0) ? "character_slot1_0x5a" : "character_slot1_S3_0x5a"
					}
					else
						key = stringformat((Mighty_Sprite_type == 0) ? "character_slot1_0x%02x" : "character_slot1_S3_0x%02x", objA0.animation.sprite)
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
					return true
				}
			}
		}
		// Continue icon blue spheres
		if ((objA0.update_address == 0x02ebe8 || objA0.update_address == 0x02ec4a) && objA0.animation.sprite >= 0x29 && objA0.animation.sprite <= 0x2b)
		{
			key = Special_Continue_icons()
			Renderer.drawCustomSprite(key, px, py, 0x40, flags, renderQueue)
			return true
		}
		//Bluespheres Palette
		if (gameMode == 0x34 || gameMode == 0x48 || gameMode == 0x2c || gameMode == 0x30 || global.game_mode == 0x85 || global.game_mode == 0x87) //just check for mighty, thanks! // 0x85 || 0x87 checks for the custom menu of BS Time atttack
		{
			if (bluespheres.xtrachar)
			{
				if (char.animation.sprite >= 0xb0 && char.animation.sprite <= 0xb4 && (objA0.mapping_offset == 0x146620 || objA0.update_address == 0x04e000))
				{
					if (Mods.isModActive("Object Style Options") || Mods.isModActive("level object sprites"))
						ExtraChar.loadCharacterPalette(0x01)
					atex = getatex(0x01)

					if (objA0.animation.sprite == 0xb4)
						objA0.animation.sprite = 0xb1
					if (Mighty_Sprite_type == 0)
						key = stringformat("character_slot1_0x%02x", objA0.animation.sprite)
					else
						key = stringformat("character_slot1_S3_0x%02x", objA0.animation.sprite)
					
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
					return true
				}
				else if (Mods.isModActive("Extra Slot Ray") && objA0.update_address == 0x04e29c)
				{
					u8 atex2 = getatex(0x02)
					u8 animation = ((global.framecounter >> 3) % (4) + 0xb1)
					key = (System.getGlobalVariableValueByName("Ray_Sprite_type") == 0) ? stringformat("Mania_Ray_0x%02x", animation) : stringformat("character_slot2_0x%02x", animation)
					if (animation == 0xb4)
					{
						key = (System.getGlobalVariableValueByName("Ray_Sprite_type") == 0) ? "Mania_Ray_0xb2" : "character_slot2_0xb2"
					}
					Renderer.drawCustomSprite(key, px, py, atex2, flags, renderQueue)
					return true
				}
			}
			// Characters in special stage
			if (objA0.update_address == 0x00903e)// || objA0.update_address == 0x00927a) Just player one, thanks!
			{
				u8 character = getMainCharacter()
				paletteKey = (MightyPalette == 0) ? "slot1palette_bluesphere_ultimate" : (MightyPalette == 1) ? "slot1palette_bluesphere_segasonic" : (MightyPalette == 2) ? "slot1palette_bluesphere_chaotix" : (MightyPalette == 3 && Mighty_Sprite_type == 0) ? "(Mania)slot1palette_bluesphere_mania" : (MightyPalette == 3) ? "(S3)slot1palette_bluesphere_mania" : (MightyPalette == 4) ? "slot1palette_bluesphere_Knuxred" : (MightyPalette == 5) ? "slot1palette_bluesphere_blood_orange" : (MightyPalette == 7) ? "slot1palette_bluesphere_lambert_cherry" : "slot1palette_bluesphere_wild_berry"
				key = (Mighty_Sprite_type == 0) ? stringformat("bluesphere_slot1_0x%02x", objA0.animation.sprite) : stringformat("bluesphere_slot1_S3_0x%02x", objA0.animation.sprite)
				if (Renderer.hasCustomSprite(key))
				{
					// Check if there's also a custom palette
					if (System.hasExternalPaletteData(paletteKey, 0))
					{
						atex = 0x40 + character * 0x20
					}
				}
				else //let's say someone deleted the bluespheres sprites...at least they'll see sonic...
				{
					//I don't care it's internal sprite rendering! Pick the external palette ANYWAY!

					if (System.hasExternalPaletteData(paletteKey, 0))
					{
						atex = 0x40 + character * 0x20
					}

					key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
				}
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
				return true
			}
			if (global.characters == CHARS_SONIC_AND_TAILS && objA0.update_address == 0x00927a)
			{
			#if GAMEAPP >= 0x22051500
				if (IsRayaPartner)
					return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
			#endif
				u8 character = getSecondCharacter()
				atex = (character == CHARACTER_TAILS) ? 0x10 : 0x00
				paletteKey = (character == CHARACTER_SONIC) ? "bluesphere_palette_sonic" : (character == CHARACTER_TAILS) ? "bluesphere_palette_tails" : "bluesphere_palette_knuckles"
				key = stringformat((character == CHARACTER_SONIC) ? "bluesphere_sonic_0x%02x" : (character == CHARACTER_TAILS) ? "bluesphere_tails_0x%02x" : "bluesphere_knuckles_0x%02x", objA0.animation.sprite)
				u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
				if (numColors > 0)
				{
					u32 dest = 0x802180 + character * 0x40
					for (u16 i = 0; i < numColors; ++i)
					{
						u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
					}
				} 
				if (Renderer.hasCustomSprite(key))
				{
					// Check if there's also a custom palette
					if (System.hasExternalPaletteData(paletteKey, 0))
					{
						atex = 0x40 + character * 0x20
					}
				}
				else
				{
					if (character == CHARACTER_SONIC)
						key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
					else if (character == CHARACTER_TAILS)
						key = Renderer.setupCustomCharacterSprite(0x28f95a, 0x2908d2, objA0.mapping_offset, objA0.animation.sprite, 0x10)
					else
						key = Renderer.setupCustomCharacterSprite(0x0abf22, 0x0ad31a, objA0.mapping_offset, objA0.animation.sprite, 0x00)
				}
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}
			// Tails' tails object in special stage isn't here...look in the real onWriteToSpriteTable!		
		}
		if (objA0.update_address == 0x02d8e2) //&& global.zone != 0x0c
		{
			if (Display_Banner && global.zone == 0x0c)
				return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
			else if (Zone_Banner == 1)
			{
				if (Mighty_Banner_Text == 1)
				{
					key = (Banner_Text == 0) ? "A" : (Banner_Text == 1) ? "A_S3_air" : (Banner_Text == 2) ? "A_S3" : (Banner_Text == 3) ? "A_S&K" : "A_S3&K"
					Renderer.drawCustomSprite(stringformat("titlecard_D%s", key), px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
				}
				else
				{
					key = (Banner_Text == 0) ? "DA" : (Banner_Text == 1) ? "air_DA" : (Banner_Text == 2) ? "S3_DA" : (Banner_Text == 3) ? "S&K_DA" : "S3&K_DA"
					Renderer.drawCustomSprite(stringformat("titlecard_M_in_%s", key), px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
				}
				return true
			}
			else
			{
				if (Mighty_Banner_Text == 0)
				{
					key = (Banner_Text == 0) ? "DAGE_def" : (Banner_Text == 1) ? "S3_air" : (Banner_Text == 2) ? "S3" : (Banner_Text == 3) ? "S&K" : "S3&K"
					Renderer.drawCustomSprite(stringformat("titleCard_M_in_%s", key), px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
					return true
				}
			}
		}
	}
	
    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function bool ExtraChar.onWriteToCompetitionSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if ((objA0.update_address == 0x0105c4 || objA0.update_address == 0x013102))
	{
		if (char.character >= 0x03 && competition.xtrachar == 0x01)
		{
			string key
			u8 atex = 0x40 + char.character * 0x20
			u8 flags
			
			if (u8[A0 + 0x0d] & 0x02)
			{
				u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(char.character, char.animation.sprite)
				//interrupt animation if not spinning or speed = 0
				if (char.state == char.state.ROLLING && char.velocity.y > 0)
				{
					//windup
					if (MightyFrameCounter < 2)
					{
						key = "comp_character_windup"				
						MightyFrameCounter = MightyFrameCounter + 1
					}
					else //drop frames
					{
						animationSpriteEx = (level.framecounter >> 1) & 0x01
						key = stringformat("comp_character_drop_%d", animationSpriteEx)
					}
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
					return true
				}
				else
				{
					u8[A0 + 0x0d] &= ~0x02
					MightyFrameCounter = 0
				}
			}
		
			if (u8[A0 + 0x0d] & 0x40)
			{
				if (char.state == char.state.ROLLING)
				{
					key = "comp_character_Mighty_wall"
					Renderer.drawCustomSprite(key, px, py, atex, ((char.flags & char.flag.FACING_LEFT) && MightyWallCollision == 2) ? SPRITE_FLAG_FLIP_X : flags, renderQueue)
					return true
				}
				else    //1.9 fix - WALL LATCH BROKEN BY SOMETHING
				{
					MightyFrameCounter = 0
					MightyWallCollision = 0
					MightyCollisionTimer = 0
					MightyYCollision = 0
				}
			}
		}
	}
	
	// Return the base function
	return base.ExtraChar.onWriteToCompetitionSpriteTable(px, py, renderQueue)
}

function u64 GetXtraName(u8 xtrachar, u8 char)
{
	if (xtrachar == 1 && char == CHARACTER_SONIC)
		return (Mighty_Sprite_type) ? "slot1_S3" : "slot1"

	return base.GetXtraName(xtrachar, char)
}

function string Animated_Continue_icons()
{
	return stringformat((Mighty_Sprite_type == 0) ? "Continue_icon_Mania_0x%02x" : "Continue_icon_S3_0x%02x", objA0.animation.sprite)
}

function string Special_Continue_icons()
{
	if (Mighty_Sprite_type == 0)
		return "Continue_icon_Mania"
	else
		return "Continue_icon_S3"
}

global u16 Rand
//# address-hook(0x05f26c) end(0x05f2dc)
function void fn05f26c()
{
	base.fn05f26c()
	if (Move_Mighty)
		Rand = System.rand() % 50 // 2% chance of happening
}

function string getMightySprite()
{
	return (Mighty_Sprite_type == 0) ? "dataSel_slot1" : "S3_portrait"
}

//Palette selection for Mighty
//SET THE PALETTE -- REGULAR GAME HAS ITS OWN ENTRY
function string getCharacterPaletteKey(u8 character)
{
	u8 gameMode = global.game_mode & 0x7f
	if ((global.xtrachar == 1 && character == CHARACTER_SONIC && gameMode != 0x4c && gameMode != 0x44 && gameMode != 0x2c && gameMode != 0x30) || character == 3)
	{
		return getExtraCharacterPaletteKey(0x01)
	}
	
    return base.getCharacterPaletteKey(character)
}

// Returns the palette key of the specified extra character.
function string getExtraCharacterPaletteKey(u8 xtrachar)
{
	if (xtrachar == 0x01)
	{
		if (MightyPalette == 0)
			return "slot1palette_ultimate"
		else if (MightyPalette == 1)
			return "slot1palette_segasonic"
		else if (MightyPalette == 2)
			return "slot1palette_chaotix"
		else if (MightyPalette == 3)
		{
			if (Mighty_Sprite_type == 0)
				return "(Mania)slot1palette_mania"
			else
				return "(S3)slot1palette_mania"
		}
		else if (MightyPalette == 4)
			return "slot1palette_Knuxred"
		else if (MightyPalette == 5)
			return "slot1palette_blood_orange"
		else if (MightyPalette == 6)
			return "slot1palette_wild_berry"
		else if (MightyPalette == 7)
			return "slot1palette_lambert_cherry"
		else
			return "slot1palette_undertale"
	}
	
	// Return the base function
	return base.getExtraCharacterPaletteKey(xtrachar)
}

#if STANDALONE

function string getManiaInspSignpost(u8 character)
{
	u64 key = 0x00
	u64 rayPartner = Mods.isModActive("Extra Slot Ray") ? System.getGlobalVariableValueByName("Ray_Partner") : 0

	if (global.xtrachar == 1) 
	{
		if (character == CHARACTER_SONIC)
			key = (Mighty_Sprite_type) ? "Mania_Signpost_slot1_S3" : "Mania_Signpost_slot1"
		else if (character == CHARACTER_TAILS)
		{
			if (rayPartner > 2)
				key = System.getGlobalVariableValueByName("Ray_Sprite_type") ? "Mania_Signpost_slot2_S3" : "Mania_Signpost_slot2"
		}
	}

	if (key != 0x00 && Renderer.hasCustomSprite(key))
		return key

	return base.getManiaInspSignpost(character)
}

#endif

// Ending pose fixes
function string getCharacterEndPosePaletteKey(u8 character)
{
	if (XtraChar != 1)
	{
		return base.getCharacterEndPosePaletteKey(character)
	}

	return " "
}

function u8 getModdedEndPosePaletteLine(u8 character, bool isHyperEffect)
{
	if (XtraChar != 1)
	{
		return base.getModdedEndPosePaletteLine(character, isHyperEffect)
	}
	return 0
}

function void loadCharacterEndPosePalette(u8 character, u32 targetAddress, u8 paletteVariant)
{
	if (XtraChar != 1)
	{
		base.loadCharacterEndPosePalette(character, targetAddress, paletteVariant)
		return
	}

}

function bool UpdatePaletteEffects.SuperForm.endpose()
{
	if (XtraChar != 1)
	{
		return base.UpdatePaletteEffects.SuperForm.endpose()
	}
	return false
}

function void UpdatePaletteEffects.SuperForm.endpose.moddingVersion(u8 characterVersion)
{

	if (XtraChar != 1)
	{
		base.UpdatePaletteEffects.SuperForm.endpose.moddingVersion(characterVersion)
		return
	}
}

//Bluespheres Palette --- it's in the first block of the special stage code!
//# address-hook(0x0081c6) end(0x00858e)
function void SpecialStage()
{
	//let's load this only for mighty
	if (XtraChar != 1)
	{
		base.SpecialStage()
		return
	}

#if STANDALONE
	playMusic(MUSIC_CTRL_FADEOUT)
#else
	playMusic(MUSIC_CTRL_STOP)
#endif

	kosinski.queue_size = 0
	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	FadeScreenToWhiteBlocking()

#if STANDALONE
	// Add a small artificial delay here
	for (u8 i = 0; i < 12; ++i)
		yieldInWhiteScreen()
#endif

//	set_status_register(0x2700)

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)	// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0)
	VDP.Config.setBackdropColor(0x20)
	VDP.Config.setRenderingModeConfiguration(false)
	water.fullscreen = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffffe6e, 0x4c)
	zeroMemory(0xffffe400, 0x100)

	u32[0xfffffe66] = 0
	u32[0xfffffe6a] = 0

	fn01aa6e()

	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	// Load special stage palette
	//  -> Character colors is the 8 colors from 0xfffffc90 (for Sonic/Knuckles) and 0xfffffcb0 (for Tails)
	copyMemory(0xfffffc80, 0x00896e, 0x100)
	//if (global.characters == CHARS_KNUCKLES_ALONE)
	//{
	//	copyMemory(0xfffffc90, 0x0089ee, 0x10)
	//}

#if STANDALONE
	u64 paletteKey = (MightyPalette == 0) ? "slot1palette_bluesphere_ultimate" : (MightyPalette == 1) ? "slot1palette_bluesphere_segasonic" : (MightyPalette == 2) ? "slot1palette_bluesphere_chaotix" : (MightyPalette == 3 && Mighty_Sprite_type == 0) ? "(Mania)slot1palette_bluesphere_mania" : (MightyPalette == 3) ? "(S3)slot1palette_bluesphere_mania" : (MightyPalette == 4) ? "slot1palette_bluesphere_Knuxred" : (MightyPalette == 5) ? "slot1palette_bluesphere_blood_orange" : (MightyPalette == 7) ? "slot1palette_bluesphere_lambert_cherry" : "slot1palette_bluesphere_wild_berry"

	u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
	if (numColors > 0)
	{
		u32 dest = 0x802180 + getMainCharacter() * 0x40
		for (u16 i = 0; i < numColors; ++i)
		{
			u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
			if (Mighty_Grays == 1 && (MightyPalette != 0 || MightyPalette != 4 || MightyPalette != 5))
			{
				u16[dest + 2 * 12] = 0x0ecc
				u16[dest + 2 * 13] = 0x0866
			}
		}
	}
#endif

	Nemesis.loadDataToVRAM(0x0b07b8, 0x0000)

	fn0085b0()

	Enigma.decompress(0x0aef54, 0xffff5500, 0x0000)
	copyRectToVRAM(0xffff5500, 0xc000, 0x28, 0x1c)

	Nemesis.loadDataToVRAM(0x0ad904, 0xd000)
	Nemesis.loadDataToVRAM(0x0adf60, 0xb4e0)
	Nemesis.loadDataToVRAM(0x0aeed0, 0xb360)
	Nemesis.loadDataToVRAM(0x0ad472, 0xabe0)
	Nemesis.loadDataToVRAM(0x0ad5f4, 0xdf00)
	Nemesis.loadDataToVRAM(0x0ad650, 0xf020)

	A0 = 0x0ad650
	A4 = 0xffffe020
	fn0015cc()

	Nemesis.loadDataToVRAM(0x0ad7bc, 0xb120)
	Nemesis.loadDataToVRAM(0x0ad430, 0xf400)

	copyRectToVRAM(0x008d2c, 0xc084, 0x08, 0x03)
	copyRectToVRAM(0x008d2c, 0xc0bc, 0x08, 0x03)

	Enigma.decompress(0x0aedb0, 0xffff0000, 0x459b)
	copyRectToVRAM(0xffff0000, 0xe000, 0x40, 0x20)

	Kosinski.decompress(0x0b2e36, 0xffff0000)

	fn009ea0()
	fn00a0e6()

	global.level_started = 0
	bluespheres.bs_hud_dirty = 0xff
	bluespheres.rings_flags = 0x80
	bluespheres.current_gamespeed = 0x1000
	bluespheres.speedup_countdown = BlueSpheres.useGeneratedStages() ? 2700 : 1800
	camera.foreground.x.u16 = 0
	camera.foreground.y.u16 = 0
	level.height.bitmask = 0xffff

	u32[0xffffb000] = 0x008faa
	if (getNumPlayers() >= 2)
	{
		u32[0xffffb04a] = 0x009212
	}
	u32[0xffffb094] = 0x008df8
	u32[0xffffb0de] = 0x008e40
	UpdateGameObjects()

	fn009d9e()
	fn009dde()
	RenderSprites()

	BlueSpheres.RenderSpheres()
	fn009d5e()

	u8[0xffffe433] = 0x01
	global.frame_state = 0x1c

	waitForNextFrame()

	u8[0xffffe433] = 0
	VDP.Config.setRenderingModeConfiguration(true)		// Enable shadow/highlight palette mode

	global.demo_countdown = 1800
	fn0075d2()

#if STANDALONE
	if (BlueSpheres.useGeneratedStages())
	{
		playMusic(0xf8)		// Different music track, one that speeds up the music only every 45 (instead of 30) seconds
	}
	else
#endif
	{
		playMusic(0x1c)
	}

	VDP.Config.setActiveDisplay(true)
	BlueSpheres.FadeIn()

	while (true)
	{
		UpdateGamePause()
		global.frame_state = 0x1c
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()
	@EntryPoint:

		++level.framecounter
		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		BlueSpheres.RenderCharacterSprites()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#else
	#if STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		if (global.rolling_demo && global.demo_countdown == 0)
			break

		if (global.game_mode != 0x34)	// Blue Spheres game mode
			break

	#if STANDALONE
		// Only needed to support restart from the Pause Menu
		//  -> Not used at the moment, so nevermind
		if (level.restart)
		{
			global.game_mode = 0x0c
			return
		}
	#endif
	}

	if (global.rolling_demo)
	{
		global.game_mode = 0
	}

	global.demo_countdown = 60
	palette_fade.range = 0x003f
	u16[0xfffff794] = 0

	while (true)
	{
		global.frame_state = 0x1c

		waitForNextFrame()

		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#else
	#if STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		--u16[0xfffff794]
		if (s16[0xfffff794] < 0)
		{
			u16[0xfffff794] = 2
			FadePaletteToWhite()
		}

		if (global.demo_countdown == 0)
			break
	}
}

function bool Standalone.onDrawVdpSpriteCompound(s16 px, s16 py, u8 size, u16 index, u16 renderQueue, u8 spriteCounter)
{
    if (objA0.update_address == 0x00d30c || objA0.update_address == 0x00d42c)
    {
        if (index == 0xab0b || index == 0xab17)    //Sonic icon
        {
            if (objA0.animation.sprite == 5 && objA0.animation.timer == 1)
            {
                u64 key
				if (Mods.isModActive("Mania Style Data Select"))
					key = "dataSel_character_mighty"
				else
					key = getMightySprite()
                if (Renderer.hasCustomSprite(key))
                {
                    return true
                }
            }
        }
    }
   
    return base.Standalone.onDrawVdpSpriteCompound(px, py, size, index, renderQueue, spriteCounter)
}